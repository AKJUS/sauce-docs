"use strict";(self.webpackChunksauce_docs=self.webpackChunksauce_docs||[]).push([[81372],{74448:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var s=n(74848),i=n(28453);const a={id:"the-variables-system-in-api-fortress",title:"The Variables System in API Fortress",sidebar_label:"The Variables System in API Fortress",keywords:["api-testing","variables","planning"]},r=void 0,o={id:"api-testing/on-prem/learn-more/the-variables-system-in-api-fortress",title:"The Variables System in API Fortress",description:"Legacy DocumentationYou're viewing legacy documentation for API Fortress (deployed via an on-premises container). To view documentation for the new SaaS version of API Fortress &#8212; now known as Sauce Labs API Testing and Monitoring (with Sauce Connect tunnels) &#8212; see API Testing on the Sauce Labs Cloud.",source:"@site/docs/api-testing/on-prem/learn-more/the-variables-system-in-api-fortress.md",sourceDirName:"api-testing/on-prem/learn-more",slug:"/api-testing/on-prem/learn-more/the-variables-system-in-api-fortress",permalink:"/sauce-docs/pr-preview/pr-2911/api-testing/on-prem/learn-more/the-variables-system-in-api-fortress",draft:!1,unlisted:!1,editUrl:"https://github.com/saucelabs/sauce-docs/edit/main/docs/api-testing/on-prem/learn-more/the-variables-system-in-api-fortress.md",tags:[],version:"current",lastUpdatedBy:"Alex Plischke",lastUpdatedAt:1724858356e3,frontMatter:{id:"the-variables-system-in-api-fortress",title:"The Variables System in API Fortress",sidebar_label:"The Variables System in API Fortress",keywords:["api-testing","variables","planning"]},sidebar:"apif",previous:{title:"Outline a Plan for your Test",permalink:"/sauce-docs/pr-preview/pr-2911/api-testing/on-prem/learn-more/planning-your-test"},next:{title:"Working with  the Header",permalink:"/sauce-docs/pr-preview/pr-2911/api-testing/on-prem/learn-more/working-with-the-response-object"}},l={},c=[{value:"Global Vault",id:"global-vault",level:2},{value:"Project Vault",id:"project-vault",level:2},{value:"Test Global",id:"test-global",level:2},{value:"Test Input Set",id:"test-input-set",level:2},{value:"Environment / Overrides",id:"environment--overrides",level:2},{value:"SET Component",id:"set-component",level:2}];function d(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Head:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n,{children:(0,s.jsx)("meta",{name:"robots",content:"noindex"})}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Legacy Documentation"}),(0,s.jsx)("br",{}),"You're viewing legacy documentation for API Fortress (deployed via an on-premises container). To view documentation for the new SaaS version of API Fortress \u2014 now known as Sauce Labs API Testing and Monitoring (with Sauce Connect tunnels) \u2014 see ",(0,s.jsx)(t.a,{href:"/api-testing/",children:"API Testing on the Sauce Labs Cloud"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"When an API Fortress test is executed, a variable stack is built. Every variable in the scope is accessible through API Fortress expressions and components."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"The contribution to the variable stack happens in this order"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Global Vault"}),"\n",(0,s.jsx)(t.li,{children:"Project Vault"}),"\n",(0,s.jsx)(t.li,{children:"Test's global variables"}),"\n",(0,s.jsx)(t.li,{children:"Test's input set variables"}),"\n",(0,s.jsx)(t.li,{children:'Selected environment variables (also referred to as "Overrides")'}),"\n",(0,s.jsx)(t.li,{children:"SET components within the test"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"The order is important because during the run-down if a variable is redefined, then it gets rewritten."}),"\n",(0,s.jsx)(t.p,{children:'Say, for example, the "domain" variable is declared in the Global Vault. Then this variable needs not to be redeclared in the other 5 stages to retain its original value.'}),"\n",(0,s.jsx)(t.p,{children:"Given the nature of these variables stores, a strategy naturally arises."}),"\n",(0,s.jsx)(t.h2,{id:"global-vault",children:"Global Vault"}),"\n",(0,s.jsx)(t.p,{children:"This is a place to store variables that live across the whole organization. Variables in this area are critical and generally stable."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Example:"})," assume your whole organization has two domains performing two different things, and that's all the testing you will do with API Fortress. Then two ideal domain_1 and domain_2 variables would be probably be placed here."]}),"\n",(0,s.jsx)(t.h2,{id:"project-vault",children:"Project Vault"}),"\n",(0,s.jsx)(t.p,{children:"In this vault, you will store variables that serve as a common ground for all tests within a project."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Following our previous example"}),", assuming the two services need to use two different authentication tokens, then this is the place where an auth_token variable should be stored."]}),"\n",(0,s.jsx)(t.h2,{id:"test-global",children:"Test Global"}),"\n",(0,s.jsx)(t.p,{children:"This is where you store variables that are specific to the test but are not related to a specific scenario."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"For example"}),", if you're testing the /api/products API, then you can store the endpoint as a variable in the Test Global."]}),"\n",(0,s.jsx)(t.h2,{id:"test-input-set",children:"Test Input Set"}),"\n",(0,s.jsx)(t.p,{children:"This is where you store variables that are specific to a scenario."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"For example"}),", if you're testing the /api/product/",":id"," API, the ID is specific to a scenario, so that should be a variable in the input set. The ability to have multiple input sets in a set allows you to run a test against multiple scenarios."]}),"\n",(0,s.jsx)(t.h2,{id:"environment--overrides",children:"Environment / Overrides"}),"\n",(0,s.jsx)(t.p,{children:"An environment (or override) is a set of variables that represent a temporary change in the premises of a test."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"For example"}),' if, as a default, the domain variable reflects a production environment, but you occasionally want to run the test against a staging environment, this is where you redefine the variable. Being "environment" the last step prior to test execution, it will win over the default.']}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"As a general rule of thumb, we strongly advocate for not relying on environments for the test to function properly. Tests should be self-sufficient and already be able to run before the environment stage, which should be used to change the value to certain variables, not defining new ones."})}),"\n",(0,s.jsx)(t.h2,{id:"set-component",children:"SET Component"}),"\n",(0,s.jsx)(t.p,{children:"Finally, the SET component allows you to create variables during test execution. This is useful when a certain variable acquires a value based on what happens during the test, such as a key in a payload, or a computed value."})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(96540);const i={},a=s.createContext(i);function r(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);