"use strict";(self.webpackChunksauce_docs=self.webpackChunksauce_docs||[]).push([[76038],{73832:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>c,metadata:()=>o,toc:()=>u});var t=a(74848),r=a(28453),i=a(11470),s=a(19365);a(86025);const c={id:"configuration",title:"Configuring Backtrace for Android",sidebar_label:"Configuration",description:"Configure Backtrace for your Android project."},l=void 0,o={id:"error-reporting/platform-integrations/android/configuration",title:"Configuring Backtrace for Android",description:"Configure Backtrace for your Android project.",source:"@site/docs/error-reporting/platform-integrations/android/configuration.md",sourceDirName:"error-reporting/platform-integrations/android",slug:"/error-reporting/platform-integrations/android/configuration",permalink:"/sauce-docs/pr-preview/pr-2910/error-reporting/platform-integrations/android/configuration",draft:!1,unlisted:!1,editUrl:"https://github.com/saucelabs/sauce-docs/edit/main/docs/error-reporting/platform-integrations/android/configuration.md",tags:[],version:"current",lastUpdatedBy:"Alex Plischke",lastUpdatedAt:1724792718e3,frontMatter:{id:"configuration",title:"Configuring Backtrace for Android",sidebar_label:"Configuration",description:"Configure Backtrace for your Android project."},sidebar:"backtrace",previous:{title:"Setup",permalink:"/sauce-docs/pr-preview/pr-2910/error-reporting/platform-integrations/android/setup"},next:{title:"ProGuard Deobfuscation",permalink:"/sauce-docs/pr-preview/pr-2910/error-reporting/platform-integrations/android/proguard-deobfuscation"}},d={},u=[{value:"Usage",id:"usage",level:2},{value:"Global Custom Attributes",id:"global-custom-attributes",level:2},{value:"Dynamic Custom Attributes",id:"dynamic-custom-attributes",level:2},{value:"File Attachments",id:"file-attachments",level:2},{value:"Application Not Responding (ANRs)",id:"application-not-responding-anrs",level:2},{value:"Offline Database Settings",id:"offline-database-settings",level:2},{value:"Sending Reports",id:"sending-reports",level:2},{value:"Using <code>BacktraceReport</code>",id:"using-backtracereport",level:3},{value:"Sending Reports Asynchronously",id:"sending-reports-asynchronously",level:3},{value:"Sending Reports for an Exception or a Message",id:"sending-reports-for-an-exception-or-a-message",level:3},{value:"Custom Event Handlers",id:"custom-event-handlers",level:2},{value:"Unhandled Application Exceptions",id:"unhandled-application-exceptions",level:2},{value:"Library Logger - Debug Mode",id:"library-logger---debug-mode",level:2},{value:"Monitoring Custom Threads",id:"monitoring-custom-threads",level:2},{value:"Custom Client and Report Classes",id:"custom-client-and-report-classes",level:2},{value:"Breadcrumbs",id:"breadcrumbs",level:2},{value:"Enabling Breadcrumbs",id:"enabling-breadcrumbs",level:3},{value:"Adding Manual Breadcrumbs",id:"adding-manual-breadcrumbs",level:3},{value:"Automatic Breadcrumbs",id:"automatic-breadcrumbs",level:3},{value:"Adding Native Breadcrumbs",id:"adding-native-breadcrumbs",level:3},{value:"Error-Free Metrics",id:"error-free-metrics",level:2},{value:"Enabling Error-Free Metrics",id:"enabling-error-free-metrics",level:3},{value:"NDK Applications",id:"ndk-applications",level:2},{value:"Enabling Native Integration",id:"enabling-native-integration",level:3},{value:"Disabling Native Integration",id:"disabling-native-integration",level:4},{value:"Uploading Symbols",id:"uploading-symbols",level:3},{value:"Client-Side Unwinding",id:"client-side-unwinding",level:3},{value:"Unwinding Modes",id:"unwinding-modes",level:4}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Configure Backtrace for your Android project. This page defines the configuration settings, classes, and methods available with the Backtrace Android SDK."}),"\n","\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)(i.A,{groupId:"languages",children:[(0,t.jsx)(s.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// replace with your submission url\nBacktraceCredentials credentials = new BacktraceCredentials("<submissionUrl>");\nBacktraceClient backtraceClient = new BacktraceClient(getApplicationContext(), credentials);\n\n// send test report\nbacktraceClient.send("test");\n\n// Capture uncaught exceptions\nBacktraceExceptionHandler.enable(backtraceClient);\n\n// Enable ANR detection\nbacktraceClient.enableAnr();\n\n// Enable Crash Free metrics\nbacktraceClient.metrics.enable(new BacktraceMetricsSettings(credentials));\n'})})}),(0,t.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// replace with your submission url\nval credentials = BacktraceCredentials("<submissionUrl>")\nval backtraceClient = BacktraceClient(applicationContext, credentials)\n\n// send test report\nbacktraceClient.send("test")\n\n// Capture uncaught exceptions\nBacktraceExceptionHandler.enable(backtraceClient)\n\n// Enable ANR detection\nbacktraceClient.enableAnr()\n\n// Enable Crash Free metrics\nbacktraceClient.metrics.enable(BacktraceMetricsSettings(credentials))\n'})})})]}),"\n",(0,t.jsx)(n.h2,{id:"global-custom-attributes",children:"Global Custom Attributes"}),"\n",(0,t.jsxs)(n.p,{children:["Custom attributes can be included with both managed and native reports. To set global custom attributes, pass in a map of attributes to the ",(0,t.jsx)(n.code,{children:"BacktraceClient"})," constructor method."]}),"\n",(0,t.jsxs)(i.A,{groupId:"languages",children:[(0,t.jsx)(s.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'Map<String, Object> attributes = new HashMap<String, Object>(){{\n    put("custom-attribute-key", "custom-attribute-value");\n}};\nBacktraceClient backtraceClient = new BacktraceClient(context, credentials, attributes);\n'})})}),(0,t.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'val attributes: HashMap<String, Any> = hashMapOf("custom-attribute-key" to "custom-attribute-value")\nval backtraceClient = BacktraceClient(context, credentials, attributes)\n'})})})]}),"\n",(0,t.jsx)(n.h2,{id:"dynamic-custom-attributes",children:"Dynamic Custom Attributes"}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"BacktraceClient.addAttribute"})," to add global attributes to both the managed and native layer after initialization."]}),"\n",(0,t.jsxs)(i.A,{groupId:"languages",children:[(0,t.jsx)(s.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'BacktraceClient backtraceClient = new BacktraceClient(context, credentials, database);\n// ...\n\n// Add a single attribute\nfinal String attributeKey = "test-attribute";\nfinal String attributeValue = "test-value";\nbacktraceClient.addAttribute(attributeKey, attributeValue);\n\n// Append an attribute map\nfinal String attributeKey = "test-attribute";\nfinal String attributeValue = "test-value";\nMap<String, Object> attributes = new HashMap<>();\nattributes.put(attributeKey, attributeValue);\nbacktraceClient.addAttribute(attributes);\n\n'})})}),(0,t.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'val backtraceClient = BacktraceClient(context, credentials, database)\n// ...\n\n// Add a single attribute\nval attributeKey = "test-attribute"\nval attributeValue = "test-value"\nbacktraceClient.addAttribute(attributeKey, attributeValue)\n\n// Append an attribute map\nval attributeKey = "test-attribute"\nval attributeValue = "test-value"\nval attributes: HashMap<String, Any> = HashMap<String, Any> ()\nattributes[attributeKey] = attributeValue\nbacktraceClient.addAttribute(attributes)\n'})})})]}),"\n",(0,t.jsx)(n.h2,{id:"file-attachments",children:"File Attachments"}),"\n",(0,t.jsx)(n.p,{children:"You can enable default file attachments which will be sent with all Backtrace reports both managed and native."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'String fileName = context.getFilesDir() + "/" + "myCustomFile.txt";\nList<String> attachments = new ArrayList<String>(){{\n    add(fileName);\n}};\n\nBacktraceClient backtraceClient = new BacktraceClient(context, credentials, database, attributes, attachments);\n'})}),"\n",(0,t.jsx)(n.p,{children:"File attachment paths for crash reports can only be specified on initialization. If you have rotating file logs or another situation where the exact filename won't be known when you initialize your Backtrace client, you can use symlinks:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// The file simlink path to pass to Backtrace\nString fileName = context.getFilesDir() + "/" + "myCustomFile.txt";\nList<String> attachments = new ArrayList<String>(){{\n    add(fileName);\n}};\n\nBacktraceClient backtraceClient = new BacktraceClient(context, credentials, database, attributes, attachments);\n\n// The actual filename of the desired log, not known to the BacktraceClient on initialization\nString fileNameDateString = context.getFilesDir() + "/" + "myCustomFile06_11_2021.txt";\n// Create symlink\nOs.symlink(fileNameDateString, fileName);\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["If you create any new files in the same directory as your ",(0,t.jsx)(n.code,{children:"BacktraceDatabase"})," directory, they will be deleted when you create a new ",(0,t.jsx)(n.code,{children:"BacktraceClient"}),"."]})}),"\n",(0,t.jsx)(n.h2,{id:"application-not-responding-anrs",children:"Application Not Responding (ANRs)"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"BacktraceClient"})," allows you to detect Application Not Responding (ANR) errors that occur when the main thread is blocked for more than 5 seconds. You can enable ANR reporting as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"backtraceClient.enableAnr(timeout, event, debug);\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can also provide the following parameters as an argument:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"timeout"}),": Specifies how long (in milliseconds) the thread should be blocked before the ANR is reported."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"event"}),": Specifies an event, which will be executed instead of handling the ANR error by default."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"debug"}),": Does not report ANRs if the app is in debug mode."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"offline-database-settings",children:"Offline Database Settings"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"BacktraceClient"})," allows you to customize the initialization of ",(0,t.jsx)(n.code,{children:"BacktraceDatabase"})," for local storage of error reports by supplying a ",(0,t.jsx)(n.code,{children:"BacktraceDatabaseSettings"})," parameter, as shown below:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'BacktraceCredentials credentials = new BacktraceCredentials("https://submit.backtrace.io/{subdomain-name}/{submission-token}/json");\n\nContext context = getApplicationContext();\nString dbPath = context.getFilesDir().getAbsolutePath() + "/sample/backtrace/path"; // any path, eg. absolute path to the internal storage\n\nBacktraceDatabaseSettings settings = new BacktraceDatabaseSettings(dbPath);\nsettings.setMaxRecordCount(100);\nsettings.setMaxDatabaseSize(100);\nsettings.setRetryBehavior(RetryBehavior.ByInterval);\nsettings.setAutoSendMode(true);\nsettings.setRetryOrder(RetryOrder.Queue);\n\nBacktraceDatabase database = new BacktraceDatabase(context, settings);\nBacktraceClient backtraceClient = new BacktraceClient(context, credentials, database);\n// start capturing NDK crashes\ndatabase.setupNativeIntegration(backtraceClient, credentials);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"sending-reports",children:"Sending Reports"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"BacktraceClient.send"})," method sends an error report to the specified Backtrace endpoint. The ",(0,t.jsx)(n.code,{children:"send"})," method is overloaded\u2014see the examples below."]}),"\n",(0,t.jsxs)(n.h3,{id:"using-backtracereport",children:["Using ",(0,t.jsx)(n.code,{children:"BacktraceReport"})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"BacktraceReport"})," class represents a single error report. You can also submit custom attributes using the attributes parameter, as shown below."]}),"\n",(0,t.jsxs)(i.A,{groupId:"languages",children:[(0,t.jsx)(s.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'try {\n    // throw exception here\n} catch (Exception e) {\n    BacktraceReport report = new BacktraceReport(e,\n    new HashMap<String, Object>() {{\n        put("key", "value");\n    }}, new ArrayList<String>() {{\n        add("absolute_file_path_1");\n        add("absolute_file_path_2");\n    }});\n    backtraceClient.send(report);\n}\n'})})}),(0,t.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'try {\n    // throw exception here\n}\ncatch (e: Exception) {\n    val report = BacktraceReport(e, mapOf("key" to "value"), listOf("absolute_file_path_1", "absolute_file_path_2"))\n    backtraceClient.send(report)\n}\n'})})})]}),"\n",(0,t.jsx)(n.h3,{id:"sending-reports-asynchronously",children:"Sending Reports Asynchronously"}),"\n",(0,t.jsxs)(n.p,{children:["You can use the ",(0,t.jsx)(n.code,{children:"send"})," method to specify an event that should be performed after a report is sent to the server, as shown below."]}),"\n",(0,t.jsxs)(i.A,{groupId:"languages",children:[(0,t.jsx)(s.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"client.send(report, new OnServerResponseEventListener() {\n    @Override\n    public void onEvent(BacktraceResult backtraceResult) {\n        // process result here\n    }\n});\n"})})}),(0,t.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"client.send(report) { backtraceResult ->\n    // process result here\n}\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"sending-reports-for-an-exception-or-a-message",children:"Sending Reports for an Exception or a Message"}),"\n",(0,t.jsxs)(n.p,{children:["You can use the ",(0,t.jsx)(n.code,{children:"BacktraceClient.send"})," method to create a report for a specific exception or a custom message, as shown below."]}),"\n",(0,t.jsxs)(i.A,{groupId:"languages",children:[(0,t.jsx)(s.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'try {\n  // throw exception here\n} catch (Exception exception) {\n\n  backtraceClient.send(new BacktraceReport(exception));\n\n  // pass exception to send method\n  backtraceClient.send(exception);\n\n  // pass your custom message to send method\n  backtraceClient.send("Message");\n}\n'})})}),(0,t.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'try {\n    // throw exception here\n} catch (exception: Exception) {\n  backtraceClient.send(BacktraceReport(exception));\n\n  // pass exception to send method\n  backtraceClient.send(exception);\n\n  // pass your custom message to send method\n  backtraceClient.send("Message");\n}\n'})})})]}),"\n",(0,t.jsx)(n.h2,{id:"custom-event-handlers",children:"Custom Event Handlers"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"BacktraceClient"})," allows you to attach your custom event handlers. For example, you can trigger actions before the ",(0,t.jsx)(n.code,{children:"send"})," method, as shown below."]}),"\n",(0,t.jsxs)(i.A,{groupId:"languages",children:[(0,t.jsx)(s.A,{value:"java",label:"Java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"backtraceClient.setOnBeforeSendEventListener(new OnBeforeSendEventListener() {\n    @Override\n    public BacktraceData onEvent(BacktraceData data) {\n        // another code\n        return data;\n    }\n});\n"})})}),(0,t.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"backtraceClient.setOnBeforeSendEventListener { data ->\n    // another code\n    data\n}\n"})})})]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:'All events are written in "listener" pattern.'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"BacktraceClient"})," currently supports the following events:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"BeforeSend"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"RequestHandler"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"OnServerError"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"unhandled-application-exceptions",children:"Unhandled Application Exceptions"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"BacktraceClient"})," supports reporting of unhandled application exceptions not captured by your try-catch blocks. To enable reporting of unhandled exceptions:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"BacktraceExceptionHandler.enable(backtraceClient);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can also add a custom map of attributes to the ",(0,t.jsx)(n.code,{children:"BacktraceExceptionHandler"}),", which will be sent with each unhandled exception:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"BacktraceExceptionHandler.setCustomAttributes(customAttributes);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"library-logger---debug-mode",children:"Library Logger - Debug Mode"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"BacktraceLogger"})," is a class that helps with debugging and analysis code flow execution inside the library. Logger is a wrapper on the Android ",(0,t.jsx)(n.code,{children:"Log"})," class. ",(0,t.jsx)(n.code,{children:"BacktraceLogger"})," supports the following four logging levels:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"DEBUG"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"WARN"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"ERROR"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"OFF"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"To enable displaying logs from inside the library, set the level from which information should be logged, as shown below."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"BacktraceLogger.setLevel(LogLevel.DEBUG);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"monitoring-custom-threads",children:"Monitoring Custom Threads"}),"\n",(0,t.jsx)(n.p,{children:"The backtrace-android library provides structures and methods to monitor the blocking of your own threads."}),"\n",(0,t.jsx)(n.admonition,{title:"Important",type:"note",children:(0,t.jsx)(n.p,{children:"Make sure to check whether the thread is blocked and increment the counter, as shown below."})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"BacktraceWatchdog watchdog = BacktraceWatchdog(backtraceClient); // Initialize BacktraceWatchdog\nwatchdog.registerThread(customThread, timeout, delay); // Register custom thread\n\nwatchdog.checkIsAnyThreadIsBlocked(); // check if any thread has exceeded the time, by default an error will be sent to the Backtrace console\n\n\n// The following code should be executed inside the thread you want to monitor\nwatchdog.tick(this); // In your custom thread class make incrementation to inform that the thread is not blocked\n"})}),"\n",(0,t.jsx)(n.h2,{id:"custom-client-and-report-classes",children:"Custom Client and Report Classes"}),"\n",(0,t.jsxs)(n.p,{children:["You can extend ",(0,t.jsx)(n.code,{children:"BacktraceBase"})," to create your own Backtrace client and error report implementation. You can refer to ",(0,t.jsx)(n.a,{href:"https://github.com/backtrace-labs/backtrace-android/blob/master/backtrace-library/src/main/java/backtraceio/library/BacktraceClient.java",children:(0,t.jsx)(n.code,{children:"BacktraceClient"})})," for an implementation example."]}),"\n",(0,t.jsx)(n.h2,{id:"breadcrumbs",children:"Breadcrumbs"}),"\n",(0,t.jsx)(n.p,{children:"Breadcrumbs help you track events leading up to your crash, error, or other submitted objects."}),"\n",(0,t.jsx)(n.p,{children:"When breadcrumbs are enabled, any captured breadcrumbs will automatically be attached as a file to your crash, error, or other submitted object (including native crashes) and displayed in the UI on the Breadcrumbs tab."}),"\n",(0,t.jsx)(n.h3,{id:"enabling-breadcrumbs",children:"Enabling Breadcrumbs"}),"\n",(0,t.jsx)(n.p,{children:"You can enable breadcrumbs as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"backtraceClient.enableBreadcrumbs(view.getContext().getApplicationContext());\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Pass the application context to get automatic breadcrumbs for ",(0,t.jsx)(n.a,{href:"https://developer.android.com/reference/android/app/Application.ActivityLifecycleCallbacks",children:"ActivityLifecycleCallbacks"}),"."]})}),"\n",(0,t.jsx)(n.h3,{id:"adding-manual-breadcrumbs",children:"Adding Manual Breadcrumbs"}),"\n",(0,t.jsx)(n.p,{children:"You can add breadcrumbs as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'backtraceClient.addBreadcrumb("About to send Backtrace report", BacktraceBreadcrumbType.LOG);\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["We recommend that you do ",(0,t.jsx)(n.strong,{children:"not"})," make calls to ",(0,t.jsx)(n.code,{children:"addBreadcrumb"})," from performance-critical code paths."]})}),"\n",(0,t.jsx)(n.h3,{id:"automatic-breadcrumbs",children:"Automatic Breadcrumbs"}),"\n",(0,t.jsx)(n.p,{children:"By default, if you enable breadcrumbs, Backtrace registers handlers to capture Android Broadcasts and other common system events, such as low memory warnings, battery warnings, screen orientation changes, ActivityLifecycleCallbacks, and more."}),"\n",(0,t.jsx)(n.p,{children:"You can limit the types of automatic events that are captured by specifying which automatic breadcrumb types you want to enable. For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"EnumSet<BacktraceBreadcrumbType> breadcrumbTypesToEnable = EnumSet.of(BacktraceBreadcrumbType.USER);\nbacktraceClient.enableBreadcrumbs(view.getContext().getApplicationContext(), breadcrumbTypesToEnable);\n"})}),"\n",(0,t.jsx)(n.p,{children:"To disable all automatic breadcrumbs:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"EnumSet<BacktraceBreadcrumbType> breadcrumbTypesToEnable = EnumSet.of(BacktraceBreadcrumbType.MANUAL);\nbacktraceClient.enableBreadcrumbs(view.getContext().getApplicationContext(), breadcrumbTypesToEnable);\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Breadcrumbs that you add using ",(0,t.jsx)(n.code,{children:"addBreadcrumb"})," calls in your own code are always logged, regardless of their ",(0,t.jsx)(n.code,{children:"BacktraceBreadcrumbType"}),", as long as breadcrumbs are enabled. The enabled breadcrumb types do not affect your ",(0,t.jsx)(n.code,{children:"addBreadcrumb"})," calls."]})}),"\n",(0,t.jsx)(n.h3,{id:"adding-native-breadcrumbs",children:"Adding Native Breadcrumbs"}),"\n",(0,t.jsxs)(n.p,{children:["To add breadcrumbs from your NDK/C++ code, you must first register your ",(0,t.jsx)(n.code,{children:"BacktraceClient"})," Java class with the NDK by passing it to ",(0,t.jsx)(n.code,{children:"Backtrace::InitializeNativeBreadcrumbs"}),", then call the function from the Backtrace header, ",(0,t.jsx)(n.code,{children:"backtrace-android.h"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"backtrace-android.h"})," is included with the ",(0,t.jsx)(n.a,{href:"https://github.com/backtrace-labs/backtrace-android/blob/master/example-app/src/main/cpp/backtrace-android.h",children:"example-app"}),"."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Create a JNI function which passes your active ",(0,t.jsx)(n.code,{children:"BacktraceClient"})," to the ",(0,t.jsx)(n.code,{children:"Backtrace::InitializeNativeBreadcrumbs"})," function from ",(0,t.jsx)(n.code,{children:"backtrace-android.h"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"JNI:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include <jni.h>\n#include "backtrace-android.h"\n\nJNIEXPORT jboolean JNICALL\nJava_backtraceio_backtraceio_MainActivity_registerNativeBreadcrumbs(JNIEnv *env, jobject thiz,\n        jobject backtrace_base) {\n    return Backtrace::InitializeNativeBreadcrumbs(env, backtrace_base);\n}\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"backtrace.-android.h"}),":"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"bool Backtrace::InitializeNativeBreadcrumbs(JNIEnv *env, jobject backtrace_base);\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["You can now add breadcrumbs from your NDK/C++ code by directly calling the below function from ",(0,t.jsx)(n.code,{children:"backtrace-android.h"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include <jni.h>\n#include "backtrace-android.h"\n\nstd::unordered_map<std::string, std::string> attributes;\nattributes["My Attribute"] = "Attribute Value";\nbool success = Backtrace::AddBreadcrumb(env,\n                                    "My Native Breadcrumb",\n                                    &attributes,\n                                    Backtrace::BreadcrumbType::USER,\n                                    Backtrace::BreadcrumbLevel::ERROR);\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"error-free-metrics",children:"Error-Free Metrics"}),"\n",(0,t.jsx)(n.p,{children:"Error-free metrics allow you to determine:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"How many of your unique users (i.e., unique device IDs) using your app are experiencing errors/crashes."}),"\n",(0,t.jsx)(n.li,{children:"How many application sessions (i.e., individual application sessions from startup till shutdown/exit) of your app are experiencing errors/crashes."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["You can track those metrics at-a-glance, as well as in detail to find out what kinds of errors/crashes are most common. For more information, see ",(0,t.jsx)(n.a,{href:"/error-reporting/web-console/overview/#stability-metrics-widgets",children:"Stability Metrics Widgets"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"enabling-error-free-metrics",children:"Enabling Error-Free Metrics"}),"\n",(0,t.jsx)(n.p,{children:"You can enable error-free metrics as follows:"}),"\n",(0,t.jsx)(n.admonition,{title:"Important",type:"note",children:(0,t.jsxs)(n.p,{children:["Make sure to enable error-free metrics before you ",(0,t.jsx)(n.a,{href:"#enabling-native-integration",children:"enable the native integration"}),"."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Enable metrics\nBacktraceMetricsSettings metricsSettings = new BacktraceMetricsSettings(backtraceCredentials);\nbacktraceClient.metrics.enable(metricsSettings);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"ndk-applications",children:"NDK Applications"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"If your native app is built with NDK 16b, the Breakpad native crash client will be used instead of our recommended Crashpad crash client. To avoid this, use NDK 17c+ to build your native app."})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"Breakpad crash reports are submitted on the next app startup, instead of at crash time like Crashpad crash reports."})}),"\n",(0,t.jsx)(n.h3,{id:"enabling-native-integration",children:"Enabling Native Integration"}),"\n",(0,t.jsx)(n.p,{children:"In general, this should be the final step in setting up your Backtrace client to ensure all attributes and file attachment paths are captured properly by the native crash handler."}),"\n",(0,t.jsxs)(n.p,{children:["To capture NDK crashes, you can use the ",(0,t.jsx)(n.code,{children:"enableNativeIntegration"})," method as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"backtraceClient.enableNativeIntegration();\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In addition, you may also need to add the ",(0,t.jsx)(n.code,{children:"extractNativeLibs"})," option to your ",(0,t.jsx)(n.code,{children:"AndroidManifest.xml"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<application\n        android:extractNativeLibs="true">\n        ...\n</application>\n'})}),"\n",(0,t.jsxs)(n.p,{children:["For more information about ",(0,t.jsx)(n.code,{children:"extractNativeLibs"}),", see ",(0,t.jsx)(n.a,{href:"https://developer.android.com/guide/topics/manifest/application-element#extractNativeLibs",children:"Android's developer documentation"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"disabling-native-integration",children:"Disabling Native Integration"}),"\n",(0,t.jsx)(n.p,{children:"You can also disable the native integration as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"backtraceClient.disableNativeIntegration();\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Breakpad does not currently support ",(0,t.jsx)(n.code,{children:"disableNativeIntegration"}),"."]})}),"\n",(0,t.jsx)(n.h3,{id:"uploading-symbols",children:"Uploading Symbols"}),"\n",(0,t.jsx)(n.p,{children:"For an NDK application, debugging symbols are not available to Backtrace by default. You will need to upload the app symbols for your native code to Backtrace."}),"\n",(0,t.jsxs)(n.p,{children:["You can do this by uploading the native libraries themselves, which are usually found in the APK bundle. For more information on how to upload symbols for an NDK app, see ",(0,t.jsx)(n.a,{href:"/error-reporting/project-setup/symbolication/",children:"Symbolication"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"client-side-unwinding",children:"Client-Side Unwinding"}),"\n",(0,t.jsxs)(n.p,{children:["For an NDK application, debugging symbols for system functions (for instance in ",(0,t.jsx)(n.code,{children:"libc.so"}),") and other opaque libraries can be difficult to obtain. In these cases, it is better to unwind the callstack on the crashing application (i.e: the client)."]}),"\n",(0,t.jsx)(n.p,{children:"This may not provide the same callstack quality as with debugging symbols, but will give you debugging information you would otherwise not have if you don't have debugging symbols available."}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"When viewing a crash in the Backtrace console, it may still show warning messages that symbols are missing from certain frames after client-side unwinding is performed. This warning is expected if these symbols are not available on the Backtrace server, and should not impact your ability to read the callstack."})}),"\n",(0,t.jsxs)(n.p,{children:["To enable client side unwinding, you can call the ",(0,t.jsx)(n.code,{children:"setupNativeIntegration"})," method with an additional boolean value."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"database.setupNativeIntegration(backtraceClient, credentials, true);\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Client-side unwinding is only available for fatal crashes. For instance, non-fatal Crashpad dumps generated with ",(0,t.jsx)(n.code,{children:"DumpWithoutCrash"})," will not use client-side unwinding."]})}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsx)(n.p,{children:"Client-side unwinding is only available for the following platforms:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"NDK level 17 or higher (i.e: only with the Crashpad crash reporting backend)."}),"\n",(0,t.jsx)(n.li,{children:"SDK level 21 or higher (i.e: if the minimum SDK version is lower than 21, client-side unwinding will be disabled for 32-bit arm platforms)."}),"\n"]})]}),"\n",(0,t.jsx)(n.h4,{id:"unwinding-modes",children:"Unwinding Modes"}),"\n",(0,t.jsx)(n.p,{children:"You can optionally specify the unwinding mode as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"database.setupNativeIntegration(backtraceClient, credentials, true, UnwindingMode.REMOTE_DUMPWITHOUTCRASH);\n"})}),"\n",(0,t.jsx)(n.p,{children:"The following unwinding modes are available:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"LOCAL"}),": Unwinding is done within the same process that has the crash. This is less robust than remote unwinding, but avoids the complexity of creating a child process and IPC. Local unwinding is executed from a signal handler and needs to be signal-safe."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"REMOTE"}),": Unwinding is done by a child process. This means that the unwinding is correct even in case of severe malfunctions in the crashing parent process, and signal-safety is not a concern."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"LOCAL_DUMPWITHOUTCRASH"}),": This option is the same as ",(0,t.jsx)(n.code,{children:"LOCAL"})," unwinding, but instead of using the regular Crashpad signal hander to call the unwinder and regular Crashpad reporting mechanism, Backtrace's custom signal handler will be used to call the unwinder before we send the report using Crashpad's ",(0,t.jsx)(n.code,{children:"DumpWithoutCrash()"})," method."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"REMOTE_DUMPWITHOUTCRASH"}),": This is the default and recommended option. It's the same as ",(0,t.jsx)(n.code,{children:"REMOTE"})," unwinding, but instead of using the regular Crashpad signal hander to call the unwinder and regular Crashpad reporting mechanism, Backtrace's custom signal handler will be used to call the unwinder before we send the report using Crashpad's ",(0,t.jsx)(n.code,{children:"DumpWithoutCrash()"})," method."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"LOCAL_CONTEXT"}),": This option is the same as ",(0,t.jsx)(n.code,{children:"LOCAL"})," unwinding, but uses ",(0,t.jsx)(n.code,{children:"ucontext_t *"})," from the signal handler to reconstruct the callstack instead."]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},19365:(e,n,a)=>{a.d(n,{A:()=>s});a(96540);var t=a(18215);const r={tabItem:"tabItem_Ymn6"};var i=a(74848);function s(e){let{children:n,hidden:a,className:s}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.A)(r.tabItem,s),hidden:a,children:n})}},11470:(e,n,a)=>{a.d(n,{A:()=>y});var t=a(96540),r=a(18215),i=a(23104),s=a(56347),c=a(205),l=a(57485),o=a(31682),d=a(89466);function u(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:a}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:a,attributes:t,default:r}}=e;return{value:n,label:a,attributes:t,default:r}}))}(a);return function(e){const n=(0,o.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function p(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function b(e){let{queryString:n=!1,groupId:a}=e;const r=(0,s.W6)(),i=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,l.aZ)(i),(0,t.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(r.location.search);n.set(i,e),r.replace({...r.location,search:n.toString()})}),[i,r])]}function g(e){const{defaultValue:n,queryString:a=!1,groupId:r}=e,i=h(e),[s,l]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=a.find((e=>e.default))??a[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:i}))),[o,u]=b({queryString:a,groupId:r}),[g,m]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,i]=(0,d.Dv)(a);return[r,(0,t.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:r}),x=(()=>{const e=o??g;return p({value:e,tabValues:i})?e:null})();(0,c.A)((()=>{x&&l(x)}),[x]);return{selectedValue:s,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),m(e)}),[u,m,i]),tabValues:i}}var m=a(92303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=a(74848);function v(e){let{className:n,block:a,selectedValue:t,selectValue:s,tabValues:c}=e;const l=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.a_)(),d=e=>{const n=e.currentTarget,a=l.indexOf(n),r=c[a].value;r!==t&&(o(n),s(r))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=l.indexOf(e.currentTarget)+1;n=l[a]??l[0];break}case"ArrowLeft":{const a=l.indexOf(e.currentTarget)-1;n=l[a]??l[l.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":a},n),children:c.map((e=>{let{value:n,label:a,attributes:i}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>l.push(e),onKeyDown:u,onClick:d,...i,className:(0,r.A)("tabs__item",x.tabItem,i?.className,{"tabs__item--active":t===n}),children:a??n},n)}))})}function f(e){let{lazy:n,children:a,selectedValue:r}=e;const i=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===r));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function k(e){const n=g(e);return(0,j.jsxs)("div",{className:(0,r.A)("tabs-container",x.tabList),children:[(0,j.jsx)(v,{...e,...n}),(0,j.jsx)(f,{...e,...n})]})}function y(e){const n=(0,m.A)();return(0,j.jsx)(k,{...e,children:u(e.children)},String(n))}},28453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>c});var t=a(96540);const r={},i=t.createContext(r);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);