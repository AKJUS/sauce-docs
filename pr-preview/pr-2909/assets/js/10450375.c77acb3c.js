"use strict";(self.webpackChunksauce_docs=self.webpackChunksauce_docs||[]).push([[92914],{70:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>d,toc:()=>r});var i=o(74848),s=o(28453);const t={id:"load-balancing",title:"Bloodhound: Load Balancing",sidebar_label:"Load Balancing",description:"This page details Bloodhound's simple load balancing capability."},a=void 0,d={id:"api-testing/on-prem/bloodhound/load-balancing",title:"Bloodhound: Load Balancing",description:"This page details Bloodhound's simple load balancing capability.",source:"@site/docs/api-testing/on-prem/bloodhound/load-balancing.md",sourceDirName:"api-testing/on-prem/bloodhound",slug:"/api-testing/on-prem/bloodhound/load-balancing",permalink:"/sauce-docs/pr-preview/pr-2909/api-testing/on-prem/bloodhound/load-balancing",draft:!1,unlisted:!1,editUrl:"https://github.com/saucelabs/sauce-docs/edit/main/docs/api-testing/on-prem/bloodhound/load-balancing.md",tags:[],version:"current",lastUpdatedBy:"Alex Plischke",lastUpdatedAt:1724777154e3,frontMatter:{id:"load-balancing",title:"Bloodhound: Load Balancing",sidebar_label:"Load Balancing",description:"This page details Bloodhound's simple load balancing capability."},sidebar:"apif",previous:{title:"Base Actors",permalink:"/sauce-docs/pr-preview/pr-2909/api-testing/on-prem/bloodhound/base-actors"},next:{title:"Fine Tuning",permalink:"/sauce-docs/pr-preview/pr-2909/api-testing/on-prem/bloodhound/fine-tuning"}},l={},r=[{value:"Load Balancing Configuration",id:"load-balancing-configuration",level:2},{value:"Additional Topics",id:"additional-topics",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Head:o}=n;return o||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o,{children:(0,i.jsx)("meta",{name:"robots",content:"noindex"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Legacy Documentation"}),(0,i.jsx)("br",{}),"You're viewing legacy documentation for API Fortress (deployed via an on-premises container). To view documentation for the new SaaS version of API Fortress \u2014 now known as Sauce Labs API Testing and Monitoring (with Sauce Connect tunnels) \u2014 see ",(0,i.jsx)(n.a,{href:"/api-testing/",children:"API Testing on the Sauce Labs Cloud"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Bloodhound has a simple load balancing capability we are going to discuss now. Before moving forward, make sure you have read the ",(0,i.jsx)(n.a,{href:"/api-testing/on-prem/bloodhound/basic-configuration",children:"basic configuration guide"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"load-balancing-configuration",children:"Load Balancing Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["The backends in the ",(0,i.jsx)(n.code,{children:"backends.yml"})," can alternatively be expressed as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"- prefix: '\\[^/\\]\\*/upstreams'\n  upstreams:\n  urls:\n  - 'https://server-1/endpoint'\n  - 'https://server-2/endpoint'\n  probe:\n  count\\_up: 2\n  count\\_down: 2\n  method: GET\n  timeout: 2 seconds\n  path: ''\n  status: 200\n  interval: 10 seconds\n  flow\\_id: default\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In this configuration, ",(0,i.jsx)(n.code,{children:"upstream"})," is replaced by the ",(0,i.jsx)(n.code,{children:"upstreams"})," object."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"urls"}),": a list of URLs that will be used as upstreams"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"probe"}),": the system will probe each URL periodically to make sure they are available. The probe is optional and, if omitted, Bloodhound will always consider URLs as functional.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"path"}),": an extra path segment to be appeneded to the URL when probing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"count_up"}),": how many times a probe should be successful before the URL can be considered as working"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"count_down"}),": how many times a probe should fail before the URL can be considered as non working"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"method"}),": which method, among ",(0,i.jsx)(n.code,{children:"GET"}),"/",(0,i.jsx)(n.code,{children:"POST"}),"/",(0,i.jsx)(n.code,{children:"PUT"}),"/",(0,i.jsx)(n.code,{children:"PATCH"})," needs to be used by the probe"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"timeout"}),": how long should a probe wait for a reply before it considers the URL as non responsive and therefore call it a failure"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"status"}),": the expected status code"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"interval"}),": how frequently should the probe run"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"NOTE"}),": The system will look for a ",(0,i.jsx)(n.code,{children:"probe"})," thread pool in the ",(0,i.jsx)(n.code,{children:"implementers.yml"})," file. If no ",(0,i.jsx)(n.code,{children:"probe"})," thread pool is defined, default will be used."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"additional-topics",children:"Additional Topics"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Fine Tuning the Configuration"}),": Please refer to the ",(0,i.jsx)(n.a,{href:"/api-testing/on-prem/bloodhound/fine-tuning",children:"fine tuning guide"})," to learn more."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>d});var i=o(96540);const s={},t=i.createContext(s);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);