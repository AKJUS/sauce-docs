"use strict";(self.webpackChunksauce_docs=self.webpackChunksauce_docs||[]).push([[73191],{72473:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var r=t(74848),n=t(28453);const i={id:"assert-greater",title:"Assert Greater",sidebar_label:"Assert Greater",description:"This assertion is used to check if the element value described by the expression is greater than a proposed value. The values can be compared as a string or number."},o=void 0,a={id:"api-testing/on-prem/assertion-components/assert-greater",title:"Assert Greater",description:"This assertion is used to check if the element value described by the expression is greater than a proposed value. The values can be compared as a string or number.",source:"@site/docs/api-testing/on-prem/assertion-components/assert-greater.md",sourceDirName:"api-testing/on-prem/assertion-components",slug:"/api-testing/on-prem/assertion-components/assert-greater",permalink:"/sauce-docs/pr-preview/pr-2917/api-testing/on-prem/assertion-components/assert-greater",draft:!1,unlisted:!1,editUrl:"https://github.com/saucelabs/sauce-docs/edit/main/docs/api-testing/on-prem/assertion-components/assert-greater.md",tags:[],version:"current",lastUpdatedBy:"Kerem",lastUpdatedAt:1724931632e3,frontMatter:{id:"assert-greater",title:"Assert Greater",sidebar_label:"Assert Greater",description:"This assertion is used to check if the element value described by the expression is greater than a proposed value. The values can be compared as a string or number."},sidebar:"apif",previous:{title:"Assert Exists",permalink:"/sauce-docs/pr-preview/pr-2917/api-testing/on-prem/assertion-components/assert-exists"},next:{title:"Assert In",permalink:"/sauce-docs/pr-preview/pr-2917/api-testing/on-prem/assertion-components/assert-in"}},d={},l=[{value:"Parameters",id:"parameters",level:2},{value:"Code View Examples",id:"code-view-examples",level:2}];function c(e){const s={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components},{Head:t}=s;return t||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t,{children:(0,r.jsx)("meta",{name:"robots",content:"noindex"})}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Legacy Documentation"}),(0,r.jsx)("br",{}),"You're viewing legacy documentation for API Fortress (deployed via an on-premises container). To view documentation for the new SaaS version of API Fortress \u2014 now known as Sauce Labs API Testing and Monitoring (with Sauce Connect tunnels) \u2014 see ",(0,r.jsx)(s.a,{href:"/api-testing/",children:"API Testing on the Sauce Labs Cloud"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["This assertion is used to check if the element value described by the expression is greater than a proposed value. The values can be compared as a ",(0,r.jsx)(s.em,{children:"string"})," or ",(0,r.jsx)(s.em,{children:"number"}),"."]}),"\n",(0,r.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Name"})}),(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Type/Value"})}),(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Required"})})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Expression"}),(0,r.jsx)(s.td,{children:"Expression"}),(0,r.jsx)(s.td,{children:"Yes"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Value"}),(0,r.jsx)(s.td,{children:"String"}),(0,r.jsx)(s.td,{children:"Yes"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Type"}),(0,r.jsx)(s.td,{children:"'integer' or 'float'"}),(0,r.jsx)(s.td,{children:"No"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Mode"}),(0,r.jsx)(s.td,{children:"'all' or 'one'"}),(0,r.jsx)(s.td,{children:"No"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Level"}),(0,r.jsx)(s.td,{children:"'error' or 'warning'"}),(0,r.jsx)(s.td,{children:"No"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Modifier"}),(0,r.jsx)(s.td,{children:"'not'"}),(0,r.jsx)(s.td,{children:"No"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Execute if item exists"}),(0,r.jsx)(s.td,{children:"'true' or 'false'"}),(0,r.jsx)(s.td,{children:"No"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Stop test if fails"}),(0,r.jsx)(s.td,{children:"'true' or 'false'"}),(0,r.jsx)(s.td,{children:"No"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Comment"}),(0,r.jsx)(s.td,{children:"String"}),(0,r.jsx)(s.td,{children:"No"})]})]})]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Expression"}),": The path to the element we want to operate on (e.g., ",(0,r.jsx)(s.code,{children:"payload.ProductID"}),"). See ",(0,r.jsx)(s.a,{href:"/api-testing/on-prem/reference/expression/",children:"Expression"})," for more details."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Value"}),": The value we want to compare the expression to."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Type"}),": The data type of the value. This attribute is optional. If no type is defined the values will be compared as strings. If the type is set the values will evaluated with the chosen comparator (ex: \u2018integer\u2019 as a whole number, \u2018float\u2019 as a decimal number)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Mode"}),": Specify if all the same elements in the payload should match the assertion (\u2018all\u2019) or if only one element (\u2018one\u2019) is enough."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Level"}),": Specify if the assertion fails whether it should be considered an \u2018error\u2019 or just a \u2018warning\u2019."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Modifier"}),": The assertion is considered verified if it does not pass."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Execute if item exists"}),": The assertion is evaluated only if the element exists. This is useful when the element does not always exist."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Stop test if fails"}),": The test will be immediately stopped if the assertion fails."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Comment"}),": Add comment messages in the form of a string data type."]}),"\n"]}),"\n",(0,r.jsx)(s.admonition,{type:"note",children:(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.strong,{children:"warning"})," will not trigger alerts (such as email or text messages)."]})}),"\n",(0,r.jsx)(s.h2,{id:"code-view-examples",children:"Code View Examples"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-html",children:'<assert-greater expression="\u201ddata.code\u201d" value="\u201d4503\u2033" />\n'})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-html",children:'<assert-greater expression="\u201ddata.code\u201d" value="\u201d4503\u2033" type="\u201dinteger\u201d" />\n'})})]})}function h(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>a});var r=t(96540);const n={},i=r.createContext(n);function o(e){const s=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),r.createElement(i.Provider,{value:s},e.children)}}}]);