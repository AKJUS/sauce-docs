"use strict";(self.webpackChunksauce_docs=self.webpackChunksauce_docs||[]).push([[91436],{17513:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>d});var r=s(74848),i=s(28453);s(11470),s(19365),s(86025);const l={id:"yaml",title:"Configuring Your Playwright Tests",sidebar_label:"YAML Configuration"},t=void 0,a={id:"web-apps/automated-testing/playwright/yaml",title:"Configuring Your Playwright Tests",description:"saucectl relies on a YAML specification file to determine exactly which tests to run and how to run them. To customize saucectl to run your Playwright tests, simply modify the properties of the YAML file accordingly. This page defines each of the configuration properties specific to running Playwright tests.",source:"@site/docs/web-apps/automated-testing/playwright/yaml.md",sourceDirName:"web-apps/automated-testing/playwright",slug:"/web-apps/automated-testing/playwright/yaml",permalink:"/sauce-docs/pr-preview/pr-2910/web-apps/automated-testing/playwright/yaml",draft:!1,unlisted:!1,editUrl:"https://github.com/saucelabs/sauce-docs/edit/main/docs/web-apps/automated-testing/playwright/yaml.md",tags:[],version:"current",lastUpdatedBy:"Alex Plischke",lastUpdatedAt:1724792718e3,frontMatter:{id:"yaml",title:"Configuring Your Playwright Tests",sidebar_label:"YAML Configuration"},sidebar:"docs",previous:{title:"Selenium Grid",permalink:"/sauce-docs/pr-preview/pr-2910/web-apps/automated-testing/playwright/selenium-grid"},next:{title:"Advanced Configuration",permalink:"/sauce-docs/pr-preview/pr-2910/web-apps/automated-testing/playwright/advanced"}},c={},d=[{value:"Setting an Alternative Configuration File",id:"setting-an-alternative-configuration-file",level:2},{value:"Example Configuration",id:"example-configuration",level:2},{value:"<code>apiVersion</code>",id:"apiversion",level:2},{value:"<code>kind</code>",id:"kind",level:2},{value:"<code>showConsoleLog</code>",id:"showconsolelog",level:2},{value:"<code>defaults</code>",id:"defaults",level:2},{value:"<code>timeout</code>",id:"timeout",level:3},{value:"<code>sauce</code>",id:"sauce",level:2},{value:"<code>region</code>",id:"region",level:3},{value:"<code>metadata</code>",id:"metadata",level:3},{value:"<code>concurrency</code>",id:"concurrency",level:3},{value:"<code>retries</code>",id:"retries",level:3},{value:"<code>tunnel</code>",id:"tunnel",level:3},{value:"<code>name</code>",id:"name",level:4},{value:"<code>owner</code>",id:"owner",level:4},{value:"<code>timeout</code>",id:"timeout-1",level:4},{value:"<code>visibility</code>",id:"visibility",level:3},{value:"<code>launchOrder</code>",id:"launchorder",level:3},{value:"<code>env</code>",id:"env",level:2},{value:"<code>rootDir</code>",id:"rootdir",level:2},{value:"<code>npm</code>",id:"npm",level:2},{value:"<code>registry</code>",id:"registry",level:3},{value:"<code>registries</code>",id:"registries",level:3},{value:"<code>url</code>",id:"url",level:4},{value:"<code>scope</code>",id:"scope",level:4},{value:"<code>authToken</code>",id:"authtoken",level:4},{value:"<code>auth</code>",id:"auth",level:4},{value:"<code>username</code>",id:"username",level:4},{value:"<code>password</code>",id:"password",level:4},{value:"<code>email</code>",id:"email",level:4},{value:"<code>packages</code>",id:"packages",level:3},{value:"<code>dependencies</code>",id:"dependencies",level:3},{value:"<code>strictSSL</code>",id:"strictssl",level:3},{value:"<code>reporters</code>",id:"reporters",level:2},{value:"<code>spotlight</code>",id:"spotlight",level:3},{value:"<code>junit</code>",id:"junit",level:3},{value:"<code>json</code>",id:"json",level:3},{value:"<code>enabled</code>",id:"enabled",level:4},{value:"<code>webhookURL</code>",id:"webhookurl",level:4},{value:"<code>filename</code>",id:"filename",level:4},{value:"<code>artifacts</code>",id:"artifacts",level:2},{value:"<code>cleanup</code>",id:"cleanup",level:3},{value:"<code>retain</code>",id:"retain",level:3},{value:"<code>download</code>",id:"download",level:3},{value:"<code>when</code>",id:"when",level:4},{value:"<code>match</code>",id:"match",level:4},{value:"<code>directory</code>",id:"directory",level:4},{value:"<code>allAttempts</code>",id:"allattempts",level:4},{value:"<code>playwright</code>",id:"playwright",level:2},{value:"<code>version</code>",id:"version",level:3},{value:"<code>configFile</code>",id:"configfile",level:3},{value:"<code>suites</code>",id:"suites",level:2},{value:"<code>name</code>",id:"name-1",level:3},{value:"<code>env</code>",id:"env-1",level:3},{value:"<code>platformName</code>",id:"platformname",level:3},{value:"<code>screenResolution</code>",id:"screenresolution",level:3},{value:"<code>testMatch</code>",id:"testmatch",level:3},{value:"<code>excludedTestFiles</code>",id:"excludedtestfiles",level:3},{value:"<code>numShards</code>",id:"numshards",level:3},{value:"<code>shard</code>",id:"shard",level:3},{value:"<code>shardGrepEnabled</code>",id:"shardgrepenabled",level:3},{value:"<code>params</code>",id:"params",level:3},{value:"<code>browserName</code>",id:"browsername",level:4},{value:"<code>headless</code>",id:"headless",level:4},{value:"<code>sloMo</code>",id:"slomo",level:4},{value:"<code>project</code>",id:"project",level:4},{value:"<code>grep</code>",id:"grep",level:4},{value:"<code>grepInvert</code>",id:"grepinvert",level:4},{value:"<code>updateSnapshots</code>",id:"updatesnapshots",level:4},{value:"<code>timeout</code>",id:"timeout-2",level:3},{value:"<code>preExec</code>",id:"preexec",level:3},{value:"<code>timeZone</code>",id:"timezone",level:3},{value:"<code>passThreshold</code>",id:"passthreshold",level:3},{value:"<code>smartRetry</code>",id:"smartretry",level:3},{value:"<code>failedOnly</code>",id:"failedonly",level:4}];function o(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"saucectl"})," relies on a YAML specification file to determine exactly which tests to run and how to run them. To customize ",(0,r.jsx)(n.code,{children:"saucectl"})," to run your Playwright tests, simply modify the properties of the YAML file accordingly. This page defines each of the configuration properties specific to running Playwright tests."]}),"\n",(0,r.jsx)(n.h2,{id:"setting-an-alternative-configuration-file",children:"Setting an Alternative Configuration File"}),"\n",(0,r.jsxs)(n.p,{children:["By default, ",(0,r.jsx)(n.code,{children:"saucectl"})," looks for the ",(0,r.jsx)(n.code,{children:"config.yml"})," file in the ",(0,r.jsx)(n.code,{children:".sauce"})," folder of your project root, but you can actually specify a different file, or if you are using multiple frameworks or need to configure different sets of tests to run separately, you may choose to have multiple configuration files that you can direct ",(0,r.jsx)(n.code,{children:"saucectl"})," to reference as necessary."]}),"\n",(0,r.jsxs)(n.p,{children:["Use the following configuration at runtime to direct ",(0,r.jsx)(n.code,{children:"saucectl"})," to use any configuration file you choose:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"saucectl run -c ./path/to/{config-file}.yml\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"YAML Required",type:"note",children:(0,r.jsxs)(n.p,{children:["While you can use multiple files of different names or locations to specify your configurations, each file must be a ",(0,r.jsx)(n.code,{children:"*.yml"})," and follow the ",(0,r.jsx)(n.code,{children:"saucectl"})," syntax. Our IDE Integrations (e.g., ",(0,r.jsx)(n.a,{href:"/dev/cli/saucectl/usage/ide/vscode",children:"Visual Studio Code"}),") can help you out by validating the YAML files and provide handy suggestions, so make sure to check them out!"]})}),"\n",(0,r.jsx)(n.h2,{id:"example-configuration",children:"Example Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:"reference",children:"https://github.com/saucelabs/saucectl-playwright-example/blob/master/.sauce/config.yml\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Each of the properties supported for running Playwright tests through ",(0,r.jsx)(n.code,{children:"saucectl"})," is defined below."]}),"\n",(0,r.jsx)(n.h2,{id:"apiversion",children:(0,r.jsx)(n.code,{children:"apiVersion"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| REQUIRED | STRING |"})}),"\n",(0,r.jsxs)(n.p,{children:["Identifies the version of the underlying configuration schema. At this time, ",(0,r.jsx)(n.code,{children:"v1alpha"})," is the only supported value."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1alpha\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"kind",children:(0,r.jsx)(n.code,{children:"kind"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| REQUIRED | STRING/ENUM |"})}),"\n",(0,r.jsx)(n.p,{children:"Specifies which framework is associated with the automation tests configured in this specification."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"kind: playwright\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"showconsolelog",children:(0,r.jsx)(n.code,{children:"showConsoleLog"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | BOOLEAN |"})}),"\n",(0,r.jsxs)(n.p,{children:["Controls whether the contents of ",(0,r.jsx)(n.code,{children:"console.log"})," are always shown in the local output of saucectl. By default (false), ",(0,r.jsx)(n.code,{children:"console.log"})," is only shown for failed suites."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"showConsoleLog: true\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"defaults",children:(0,r.jsx)(n.code,{children:"defaults"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | OBJECT |"})}),"\n",(0,r.jsx)(n.p,{children:"Specifies any default settings for the project."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"defaults:\n  timeout: 15m\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"timeout",children:(0,r.jsx)(n.code,{children:"timeout"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | DURATION |"})}),"\n",(0,r.jsxs)(n.p,{children:["Instructs how long (in ",(0,r.jsx)(n.code,{children:"ms"}),", ",(0,r.jsx)(n.code,{children:"s"}),", ",(0,r.jsx)(n.code,{children:"m"}),", or ",(0,r.jsx)(n.code,{children:"h"}),") ",(0,r.jsx)(n.code,{children:"saucectl"})," should wait for each suite to complete. You can override this setting for individual suites using the ",(0,r.jsx)(n.code,{children:"timeout"})," setting within the ",(0,r.jsx)(n.a,{href:"#suites",children:(0,r.jsx)(n.code,{children:"suites"})})," object. If not set, the default value is ",(0,r.jsx)(n.code,{children:"0"})," (unlimited)."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"defaults:\n  timeout: 15m\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"sauce",children:(0,r.jsx)(n.code,{children:"sauce"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | OBJECT |"})}),"\n",(0,r.jsx)(n.p,{children:"The parent property containing all settings related to how tests are run and identified in the Sauce Labs platform."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"sauce:\n  region: eu-central-1\n  metadata:\n    tags:\n      - e2e\n      - release team\n      - other tag\n    build: Release $CI_COMMIT_SHORT_SHA\n  concurrency: 10\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"region",children:(0,r.jsx)(n.code,{children:"region"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING/ENUM |"})}),"\n",(0,r.jsxs)(n.p,{children:["Specifies through which Sauce Labs data center tests will run. Valid values are: ",(0,r.jsx)(n.code,{children:"us-west-1"})," or ",(0,r.jsx)(n.code,{children:"eu-central-1"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["If you do not specify a region in your config file, you must set it when running your command with the ",(0,r.jsx)(n.code,{children:"--region"})," flag."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"sauce:\n  region: eu-central-1\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"metadata",children:(0,r.jsx)(n.code,{children:"metadata"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | OBJECT |"})}),"\n",(0,r.jsx)(n.p,{children:"The set of properties that allows you to provide additional information about your project that helps you distinguish it in the various environments in which it is used and reviewed, and also helps you apply filters to easily isolate tests based on metrics that are meaningful to you, as shown in the following example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"sauce:\n  metadata:\n    build: RC 10.4.a\n    tags:\n      - e2e\n      - release team\n      - beta\n      - featurex\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"concurrency",children:(0,r.jsx)(n.code,{children:"concurrency"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | INTEGER |"})}),"\n",(0,r.jsx)(n.p,{children:"Sets the maximum number of suites to execute at the same time. If the test defines more suites than the max, excess suites are queued and run in order as each suite completes."}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsx)(n.p,{children:"For tests running on Sauce, set this value to equal or less than your Sauce concurrency allowance, as setting a higher value may result in jobs dropped by the server."})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"sauce:\n  concurrency: 5\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Alternatively, you can override the file setting at runtime by setting the concurrency flag as an inline parameter of the ",(0,r.jsx)(n.code,{children:"saucectl run"})," command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"saucectl run --ccy 5\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"retries",children:(0,r.jsx)(n.code,{children:"retries"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | INTEGER |"})}),"\n",(0,r.jsxs)(n.p,{children:["Sets the number of times to retry a failed suite. For more settings, you can refer to ",(0,r.jsx)(n.a,{href:"#passThreshold",children:"passThreshold"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"sauce:\n  retries: 1\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Alternatively, you can override the file setting at runtime by setting the retries flag as an inline parameter of the ",(0,r.jsx)(n.code,{children:"saucectl run"})," command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"saucectl run --retries 1\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"tunnel",children:(0,r.jsx)(n.code,{children:"tunnel"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | OBJECT |"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"saucectl"})," supports using ",(0,r.jsx)(n.a,{href:"/secure-connections/sauce-connect/proxy-tunnels/",children:"Sauce Connect"})," to establish a secure connection with Sauce Labs. To do so, launch a tunnel; then provide the name and owner (if applicable) in this property."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"sauce:\n  tunnel:\n    name: your_tunnel_name\n    owner: tunnel_owner_username\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/secure-connections/sauce-connect/advanced/specifications/#supported-browsers-and-ports",children:"Only certain HTTP(S) ports"})," are proxied by the tunnel."]})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"name",children:(0,r.jsx)(n.code,{children:"name"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsx)(n.p,{children:"Identifies an active Sauce Connect tunnel to use for secure connectivity to the Sauce Labs cloud."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This property replaces the former ",(0,r.jsx)(n.code,{children:"id"})," property, which is deprecated."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"sauce:\n  tunnel:\n    name: your_tunnel_name\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"owner",children:(0,r.jsx)(n.code,{children:"owner"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsx)(n.p,{children:"Identifies the Sauce Labs user who created the specified tunnel, which is required if the user running the tests did not create the tunnel."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This property replaces the former ",(0,r.jsx)(n.code,{children:"parent"})," property, which is deprecated."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"sauce:\n  tunnel:\n    name: your_tunnel_name\n    owner: tunnel_owner_username\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"timeout-1",children:(0,r.jsx)(n.code,{children:"timeout"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | DURATION |"})}),"\n",(0,r.jsx)(n.p,{children:"How long to wait for the specified tunnel to be ready. Supports duration values like '10s', '30m' etc. (default: 30s)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"sauce:\n  tunnel:\n    name: your_tunnel_name\n    timeout: 30s\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"visibility",children:(0,r.jsx)(n.code,{children:"visibility"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsxs)(n.p,{children:["Sets the visibility level of test results for suites run on Sauce Labs. If unspecified or empty, ",(0,r.jsx)(n.code,{children:"team"})," visibility will be applied. Valid values are:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"public"}),": Accessible to everyone."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"public restricted"}),": Share your job's results page and video, but keeps the logs only for you."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"share"}),": Only accessible to people with a valid link."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"team"}),": (Default) Only accessible to people under the same root account as you."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"private"}),": Only you (the owner) will be able to view assets and test results page."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"sauce:\n  visibility: private\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"launchorder",children:(0,r.jsx)(n.code,{children:"launchOrder"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsxs)(n.p,{children:["Specifies the execution order for your test suites. When set to ",(0,r.jsx)(n.code,{children:"fail rate"}),", test suites with the highest failure rate will execute first. If unspecified, test suites will execute in the order in which they are written in the configuration file."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"sauce:\n  launchOrder: fail rate\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"env",children:(0,r.jsx)(n.code,{children:"env"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | OBJECT |"})}),"\n",(0,r.jsx)(n.p,{children:"A property containing one or more environment variables that are global for all tests suites in this configuration. Values set in this global property will overwrite values set for the same environment variables set at the suite level."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"env:\n  hello: world\n  my_var: $MY_VAR  # You can also pass through existing environment variables through parameter expansion\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsxs)(n.p,{children:["Environment variables set with the saucectl ",(0,r.jsx)(n.code,{children:"--env"})," flag will overwrite those specified in the sauce config file."]}),(0,r.jsx)(n.p,{children:"The order of precedence is as follows: --env flag > root-level environment variables > suite-level environment variables."})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"rootdir",children:(0,r.jsx)(n.code,{children:"rootDir"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| REQUIRED | OBJECT |"})}),"\n",(0,r.jsxs)(n.p,{children:["The directory of files that need to be bundled and uploaded for the tests to run. Ignores what is specified in ",(0,r.jsx)(n.code,{children:".sauceignore"}),". See ",(0,r.jsx)(n.a,{href:"#tailoring-your-test-file-bundle",children:"Tailoring Your Test File Bundle"})," for more details. The following examples show the different relative options for setting this value."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'rootDir: "./" # Use the current directory\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'rootDir: "packages/subpackage" # Some other package from within a monorepo\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsxs)(n.p,{children:["Only the files contained within ",(0,r.jsx)(n.code,{children:"rootDir"})," will be available during the tests. Any reference to a file that is not included in ",(0,r.jsx)(n.code,{children:"rootDir"})," will make the tests fail."]})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"npm",children:(0,r.jsx)(n.code,{children:"npm"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | OBJECT |"})}),"\n",(0,r.jsxs)(n.p,{children:["A parent property specifying the configuration details for any ",(0,r.jsx)(n.code,{children:"npm"})," dependencies. Packages listed are installed in the environment prior to your tests executing."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'npm:\n  strictSSL: true\n  registry: https://registry.npmjs.org\n  registries:\n    - url: https://registry.npmjs.org\n  packages:\n    "lodash": "4.17.20"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"registry",children:(0,r.jsx)(n.code,{children:"registry"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This setting is supported up to Playwright 1.35.1. For newer versions, use ",(0,r.jsx)(n.code,{children:"registries"}),"."]})}),"\n",(0,r.jsxs)(n.p,{children:["Specifies the location of the npm registry source. If the registry source is a private address and you are running tests on Sauce Cloud, you can provide access to the registry source using ",(0,r.jsx)(n.a,{href:"/dev/cli/saucectl/#run-tests-on-sauce-labs-with-sauce-connect",children:"Sauce Connect"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"npm:\n  registry: https://registry.npmjs.org\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"registries",children:(0,r.jsx)(n.code,{children:"registries"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | ARRAY |"})}),"\n",(0,r.jsxs)(n.p,{children:["Specifies the location of the npm registry, scope, and credentials. Only one scopeless registry is allowed. If the registry is inside a private network, you must establish a tunnel using ",(0,r.jsx)(n.a,{href:"/dev/cli/saucectl/#run-tests-on-sauce-labs-with-sauce-connect",children:"Sauce Connect"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'npm:\n  registries:\n    - url: https://registry.npmjs.org\n    - url: https://private.registry.company.org\n      scope: "@company"\n      authToken: secretToken\n      auth: base64SecretToken\n      username: myUsername\n      password: myPassword\n      email: myEmail \n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"url",children:(0,r.jsx)(n.code,{children:"url"})}),"\n",(0,r.jsx)(n.p,{children:"Specifies the URL of the npm registry."}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| REQUIRED | STRING |"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"npm:\n  registries:\n    - url: https://registry.npmjs.org\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"scope",children:(0,r.jsx)(n.code,{children:"scope"})}),"\n",(0,r.jsxs)(n.p,{children:["Specifies which scope is associated with this registry.\nSee ",(0,r.jsx)(n.a,{href:"https://docs.npmjs.com/cli/v9/using-npm/scope#associating-a-scope-with-a-registry",children:"Associating a scope with a registry"}),"."]}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'npm:\n  registries:\n    - url: https://registry.npmjs.org\n      scope: "@company"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"authtoken",children:(0,r.jsx)(n.code,{children:"authToken"})}),"\n",(0,r.jsx)(n.p,{children:"Specifies the authentication token to be used with this registry."}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"npm:\n  registries:\n    - url: https://registry.npmjs.org\n      authToken: secretToken\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"auth",children:(0,r.jsx)(n.code,{children:"auth"})}),"\n",(0,r.jsx)(n.p,{children:"Specifies the Base64-encoded authentication string for the registry entry."}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"npm:\n  registries:\n    - url: https://registry.npmjs.org\n      auth: base64SecretToken\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"username",children:(0,r.jsx)(n.code,{children:"username"})}),"\n",(0,r.jsx)(n.p,{children:"Specifies the username for authentication with the registry."}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"npm:\n  registries:\n    - url: https://registry.npmjs.org\n      username: myName\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"password",children:(0,r.jsx)(n.code,{children:"password"})}),"\n",(0,r.jsx)(n.p,{children:"Specifies the password for authentication with the registry."}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"npm:\n  registries:\n    - url: https://registry.npmjs.org\n      password: myPassword\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"email",children:(0,r.jsx)(n.code,{children:"email"})}),"\n",(0,r.jsx)(n.p,{children:"Specifies the email associated with the registry account."}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"npm:\n  registries:\n    - url: https://registry.npmjs.org\n      email: myEmail\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"packages",children:(0,r.jsx)(n.code,{children:"packages"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | OBJECT |"})}),"\n",(0,r.jsxs)(n.p,{children:["Specifies any npm packages that are required to run tests and should, therefore, be installed on the Sauce Labs VM. See ",(0,r.jsx)(n.a,{href:"/sauce-docs/pr-preview/pr-2910/web-apps/automated-testing/playwright/advanced#including-node-dependencies",children:"Including Node Dependencies"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'npm:\n  packages:\n    "lodash": "4.17.20"\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsxs)(n.p,{children:["Do not use ",(0,r.jsx)(n.code,{children:"dependencies"})," and ",(0,r.jsx)(n.code,{children:"packages"})," at the same time."]})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"dependencies",children:(0,r.jsx)(n.code,{children:"dependencies"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | ARRAY |"})}),"\n",(0,r.jsxs)(n.p,{children:["Specifies any npm packages that are required to run tests and should, therefore, be included in the bundle.\nUnlike ",(0,r.jsx)(n.code,{children:"packages"}),", which installs dependencies on the VM, the dependencies specified here have to be already installed in the local ",(0,r.jsx)(n.code,{children:"node_modules"})," folder. These dependencies, along with any related transitive dependencies, are then included in the bundle that is uploaded to Sauce Labs."]}),"\n",(0,r.jsxs)(n.p,{children:["If you have already been including ",(0,r.jsx)(n.code,{children:"node_modules"})," in your bundle, then this feature will help you speed up your tests by reducing the amount of files in the bundle. A smaller bundle will upload and extract faster, which speeds up the setup on the VM, facilitating a faster test feedback cycle."]}),"\n",(0,r.jsxs)(n.p,{children:["Take note that the syntax is different from ",(0,r.jsx)(n.code,{children:"packages"}),". It's a simple ",(0,r.jsx)(n.strong,{children:"list"})," of dependencies, without the need to specify the version."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"npm:\n  dependencies:\n    - lodash\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To use this feature, make sure that ",(0,r.jsx)(n.code,{children:"node_modules"})," is not ignored via ",(0,r.jsx)(n.code,{children:".sauceignore"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsx)(n.p,{children:"This feature is highly experimental."})}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsxs)(n.p,{children:["Do not use ",(0,r.jsx)(n.code,{children:"dependencies"})," and ",(0,r.jsx)(n.code,{children:"packages"})," at the same time."]})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"strictssl",children:(0,r.jsx)(n.code,{children:"strictSSL"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | BOOLEAN |"})}),"\n",(0,r.jsxs)(n.p,{children:["Instructs npm to perform SSL key validation when making requests to the registry via HTTPS (",(0,r.jsx)(n.code,{children:"true"}),") or not (",(0,r.jsx)(n.code,{children:"false"}),"). Defaults to npm's ",(0,r.jsx)(n.code,{children:"strict-ssl"})," value if not set. See more ",(0,r.jsx)(n.a,{href:"https://docs.npmjs.com/cli/v8/using-npm/config#strict-ssl",children:"here"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'npm:\n  strictSSL: false\n  package:\n    "lodash": "4.17.20"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"reporters",children:(0,r.jsx)(n.code,{children:"reporters"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | OBJECT |"})}),"\n",(0,r.jsxs)(n.p,{children:["Configures additional reporting capabilities provided by ",(0,r.jsx)(n.code,{children:"saucectl"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"reporters:\n  junit:\n    enabled: true\n    filename: saucectl-report.xml\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"spotlight",children:(0,r.jsx)(n.code,{children:"spotlight"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | OBJECT |"})}),"\n",(0,r.jsx)(n.p,{children:"The spotlight reporter highlights failed or otherwise interesting jobs.\nIt may include an excerpt of failed tests or other information that may be useful for troubleshooting."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"reporters:\n  spotlight:\n    enabled: true\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"junit",children:(0,r.jsx)(n.code,{children:"junit"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | OBJECT |"})}),"\n",(0,r.jsx)(n.p,{children:"The JUnit reporter gathers JUnit reports from all jobs and combines them into a single report."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"reporters:\n  junit:\n    enabled: true\n    filename: saucectl-report.xml\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"json",children:(0,r.jsx)(n.code,{children:"json"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | OBJECT |"})}),"\n",(0,r.jsx)(n.p,{children:"The JSON reporter gathers test results from all jobs and combines them into a single report."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"reporters:\n  json:\n    enabled: true\n    filename: saucectl-report.json\n    webhookURL: https://my-webhook-url\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"enabled",children:(0,r.jsx)(n.code,{children:"enabled"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | BOOLEAN |"})}),"\n",(0,r.jsx)(n.p,{children:"Toggles the reporter on/off."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"reporters:\n  json:\n    enabled: true\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"webhookurl",children:(0,r.jsx)(n.code,{children:"webhookURL"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsx)(n.p,{children:"Specifies the webhook URL. When saucectl test is finished, it'll send an HTTP POST with a JSON payload to the configured webhook URL."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"reporters:\n  json:\n    enabled: true\n    webhookURL: https://my-webhook-url\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"filename",children:(0,r.jsx)(n.code,{children:"filename"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsx)(n.p,{children:'Specifies the report filename. Defaults to "saucectl-report.json".'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"reporters:\n  json:\n    enabled: true\n    filename: my-saucectl-report.json\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"artifacts",children:(0,r.jsx)(n.code,{children:"artifacts"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | OBJECT |"})}),"\n",(0,r.jsx)(n.p,{children:"Specifies how to manage test artifacts, such as logs, videos, and screenshots."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"artifacts:\n  cleanup: true\n  download:\n    when: always\n    match:\n      - junit.xml\n    directory: ./artifacts/\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"cleanup",children:(0,r.jsx)(n.code,{children:"cleanup"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | BOOLEAN |"})}),"\n",(0,r.jsxs)(n.p,{children:["When set to ",(0,r.jsx)(n.code,{children:"true"}),", all contents of the specified download directory are cleared before any new artifacts from the current test are downloaded."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"artifacts:\n  cleanup: true\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"retain",children:(0,r.jsx)(n.code,{children:"retain"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | OBJECT |"})}),"\n",(0,r.jsxs)(n.p,{children:["Define directories to archive and retain as a test asset at the end of a test run. Archived test assets can\nbe downloaded automatically using the ",(0,r.jsx)(n.code,{children:"download"})," configuration, via the\n",(0,r.jsx)(n.a,{href:"/dev/api/jobs/#get-a-job-asset-file",children:"REST API"}),", or through the test details page."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"artifacts:\n  retain:\n    source-directory: destination-archive.zip\n  download:\n    when: always\n    match:\n      - destination-archive.zip\n    directory: ./artifacts/\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["The source and destination will be relative to the ",(0,r.jsx)(n.code,{children:"rootDir"})," defined in your configuration."]})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"The destination archive must have a .zip file extension."})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"download",children:(0,r.jsx)(n.code,{children:"download"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | OBJECT |"})}),"\n",(0,r.jsxs)(n.p,{children:["Specifies the settings related to downloading artifacts from tests run by ",(0,r.jsx)(n.code,{children:"saucectl"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"artifacts:\n  download:\n    when: always\n    match:\n      - junit.xml\n    directory: ./artifacts/\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"when",children:(0,r.jsx)(n.code,{children:"when"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsx)(n.p,{children:"Specifies when and under what circumstances to download artifacts. Valid values are:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"always"}),": Always download artifacts."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"never"}),": Never download artifacts."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pass"}),": Download artifacts for passing suites only."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fail"}),": Download artifacts for failed suites only."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"artifacts:\n  download:\n    when: always\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"match",children:(0,r.jsx)(n.code,{children:"match"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING/ARRAY |"})}),"\n",(0,r.jsxs)(n.p,{children:["Specifies which artifacts to download based on whether they match the name or file type pattern provided. Supports the wildcard character ",(0,r.jsx)(n.code,{children:"*"})," (use quotes for best parsing results with wildcard)."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'artifacts:\n  download:\n    match:\n      - junit.xml\n      - "*.log"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"directory",children:(0,r.jsx)(n.code,{children:"directory"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsx)(n.p,{children:"Specifies the path to the folder location in which to download artifacts. A separate subdirectory is generated in this location for each suite for which artifacts are downloaded. The name of the subdirectory will match the suite name. If a directory with the same name already exists, the new one will be suffixed by a serial number."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"artifacts:\n  download:\n    directory: ./artifacts/\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"allattempts",children:(0,r.jsx)(n.code,{children:"allAttempts"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | BOOLEAN |"})}),"\n",(0,r.jsxs)(n.p,{children:["If you have your tests configured with ",(0,r.jsx)(n.a,{href:"#retries",children:"retries"}),", you can set this option to ",(0,r.jsx)(n.code,{children:"true"})," to download artifacts for every attempt. Otherwise, only artifacts of the last attempt\nwill be downloaded."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"artifacts:\n  download:\n    match:\n      - console.log\n    when: always\n    allAttempts: true\n    directory: ./artifacts/\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"playwright",children:(0,r.jsx)(n.code,{children:"playwright"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| REQUIRED | OBJECT |"})}),"\n",(0,r.jsx)(n.p,{children:"The parent property containing the details specific to the Playwright project."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"playwright:\n  version: 1.43.1\n  configFile: config.ts\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"version",children:(0,r.jsx)(n.code,{children:"version"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| REQUIRED | STRING |"})}),"\n",(0,r.jsxs)(n.p,{children:["The version of Playwright that is compatible with the tests defined in this file. See ",(0,r.jsx)(n.a,{href:"/web-apps/automated-testing/playwright#supported-testing-platforms",children:"Supported Testing Platforms"})," for the list of Playwright versions supported by ",(0,r.jsx)(n.code,{children:"saucectl"})," and their compatible test platforms."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"playwright:\n  version: 1.43.1\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsxs)(n.p,{children:["You can also define a path to your ",(0,r.jsx)(n.code,{children:"package.json"}),". This will make ",(0,r.jsx)(n.code,{children:"saucectl"})," use the same Playwright version that's defined in your projects ",(0,r.jsx)(n.code,{children:"devDependencies"})," or ",(0,r.jsx)(n.code,{children:"dependencies"})," map."]}),(0,r.jsxs)(n.p,{children:["The path to your ",(0,r.jsx)(n.code,{children:"package.json"})," file will be relative to the ",(0,r.jsx)(n.code,{children:"rootDir"})," of your configuration."]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"configfile",children:(0,r.jsx)(n.code,{children:"configFile"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsxs)(n.p,{children:["The path (relative to ",(0,r.jsx)(n.code,{children:"rootDir"}),") to your Playwright configuration file. ",(0,r.jsx)(n.code,{children:"saucectl"})," determines related files based on the location of this config file. Supports both TypeScript and JavaScript files.\nIf it's not set, ",(0,r.jsx)(n.code,{children:"saucectl"})," defaults to ",(0,r.jsx)(n.code,{children:"playwright.config.ts"})," or ",(0,r.jsx)(n.code,{children:"playwright.config.js"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"playwright:\n  configFile: config.ts\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"suites",children:(0,r.jsx)(n.code,{children:"suites"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| REQUIRED | OBJECT |"})}),"\n",(0,r.jsxs)(n.p,{children:["The set of properties providing details about the test suites to run. May contain multiple suite definitions. See the full ",(0,r.jsx)(n.a,{href:"#example-configuration",children:"example config"})," for an illustration of multiple suite definitions."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"name-1",children:(0,r.jsx)(n.code,{children:"name"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| REQUIRED | STRING |"})}),"\n",(0,r.jsx)(n.p,{children:"The name of the test suite, which will be reflected in the results and related artifacts."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'suites:\n  - name: "saucy test"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"env-1",children:(0,r.jsx)(n.code,{children:"env"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | OBJECT |"})}),"\n",(0,r.jsxs)(n.p,{children:["A property containing one or more environment variables that may be referenced in the tests for this suite. Expanded environment variables are supported. Values set here will be overwritten by values set in the global ",(0,r.jsx)(n.code,{children:"env"})," property."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'suites:\n  - name: "saucy test"\n    env:\n      hello: world\n      my_var: $MY_VAR\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"platformname",children:(0,r.jsx)(n.code,{children:"platformName"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsxs)(n.p,{children:["A specific operating system and version on which to run the specified browser and test suite. Defaults to a platform that is supported by ",(0,r.jsx)(n.code,{children:"saucectl"})," for the chosen browser."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'suites:\n  - name: "saucy test"\n    platformName: "Windows 10"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"screenresolution",children:(0,r.jsx)(n.code,{children:"screenResolution"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsxs)(n.p,{children:["Specifies a browser window screen resolution, which may be useful if you are attempting to simulate a browser on a particular device type. See ",(0,r.jsx)(n.a,{href:"/basics/test-config-annotation/test-config",children:"Test Configurations"})," for a list of available resolution values."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'suites:\n  - name: "saucy test"\n    screenResolution: "1920x1080"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"testmatch",children:(0,r.jsx)(n.code,{children:"testMatch"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| REQUIRED | STRING/ARRAY |"})}),"\n",(0,r.jsx)(n.p,{children:"One or more paths to the Playwright test files to run for this suite. Regex values are supported to indicate all files of a certain type or in a certain directory, etc."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'suites:\n  - name: "saucy test"\n    testMatch: ["**/*.js"]\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"excludedtestfiles",children:(0,r.jsx)(n.code,{children:"excludedTestFiles"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | ARRAY |"})}),"\n",(0,r.jsx)(n.p,{children:"Excludes test files to skip the tests. You can use regex values to indicate all files that match a specific value, such as a file name, type, or directory."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'suites:\n  - name: "saucy test"\n    excludedTestFiles: ["**/*.js"]\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"numshards",children:(0,r.jsx)(n.code,{children:"numShards"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsxs)("small",{children:["| OPTIONAL | INTEGER | ",(0,r.jsx)("span",{class:"highlight playwright",children:"Playwright version >= 1.12"})," |"]})}),"\n",(0,r.jsxs)(n.p,{children:["Sets the number of separate shards to create for the test suite. Read more about shard tests on the ",(0,r.jsx)(n.a,{href:"https://playwright.dev/docs/test-parallel#shards",children:"Playwright developer site"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["When sharding is configured, ",(0,r.jsx)(n.code,{children:"saucectl"})," automatically creates the sharded jobs based on the number of shards you specify. For example, for a suite that specifies 2 shards, ",(0,r.jsx)(n.code,{children:"saucectl"})," clones the suite and runs shard ",(0,r.jsx)(n.code,{children:"1/2"})," on the first suite, and the other shard ",(0,r.jsx)(n.code,{children:"2/2"})," on the identical clone suite."]}),"\n",(0,r.jsx)(n.admonition,{title:"Shard Property Exclusivity",type:"caution",children:(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"numShards"})," and ",(0,r.jsx)(n.code,{children:"shard"})," properties are mutually exclusive within each suite. If you have values for both in a single suite, the test will fail and terminate. You can, however, vary shard settings across different suites."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'suites:\n  - name: "saucy test"\n    numShards: 2\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"shard",children:(0,r.jsx)(n.code,{children:"shard"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsx)(n.p,{children:"When sharding is configured, saucectl automatically splits the tests (e.g., by spec or concurrency) so that they can easily run in parallel.\nFor sharding by concurrency, saucectl splits test files into several groups (the number of groups is determined by the concurrency setting). Each group will then run as an individual job."}),"\n",(0,r.jsxs)(n.p,{children:["Selectable values: ",(0,r.jsx)(n.code,{children:"spec"})," to shard by spec file, ",(0,r.jsx)(n.code,{children:"concurrency"})," to shard by concurrency. Remove this field or leave it empty ",(0,r.jsx)(n.code,{children:'""'})," for no sharding."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"suites:\n  - name: 'I am sharded'\n    shard: spec\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsx)(n.p,{children:"To split tests in the most efficient way possible, use:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"spec"})," when the number of specs is less than the configured concurrency."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"concurrency"})," when the number of specs is larger than the configured concurrency."]}),"\n"]})]}),"\n",(0,r.jsx)(n.admonition,{title:"Shard Property Exclusivity",type:"caution",children:(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"numShards"})," and ",(0,r.jsx)(n.code,{children:"shard"})," properties are mutually exclusive within each suite. If you have values for both in a single suite, the test will fail and terminate. You can, however, vary shard settings across different suites."]})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"shardgrepenabled",children:(0,r.jsx)(n.code,{children:"shardGrepEnabled"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | BOOLEAN |"})}),"\n",(0,r.jsxs)(n.p,{children:["When sharding is configured and used in conjunction with ",(0,r.jsx)(n.code,{children:"grep"}),"/",(0,r.jsx)(n.code,{children:"grepInvert"}),", some spec files may be allocated to VMs, just to be skipped by Playwright in accordance with the ",(0,r.jsx)(n.code,{children:"grep"}),"/",(0,r.jsx)(n.code,{children:"grepInvert"})," filters, thus wasting VM allocations."]}),"\n",(0,r.jsxs)(n.p,{children:["With ",(0,r.jsx)(n.code,{children:"shardGrepEnabled: true"}),", saucectl will ensure that every spec to be allocated contains at least one test matching the ",(0,r.jsx)(n.code,{children:"grep"}),"/",(0,r.jsx)(n.code,{children:"grepInvert"})," filters."]}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsxs)(n.p,{children:["Filtering relies on the value set for ",(0,r.jsx)(n.code,{children:"grep"})," and ",(0,r.jsx)(n.code,{children:"grepInvert"}),"."]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"grep"})," to match with test name or filename."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"grepInvert"})," to exclude any match with name or filename."]}),"\n"]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'suites:\n  - name: "I am sharded"\n    shard: spec\n    shardGrepEnabled: true\n    params:\n      grep: "@smoke"\n      grepInvert: "@slow"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"params",children:(0,r.jsx)(n.code,{children:"params"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | OBJECT |"})}),"\n",(0,r.jsx)(n.p,{children:"A parent property that details any additional parameters you wish to set for the test suite."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'suites:\n  - name: "saucy test"\n    params:\n      browserName: "firefox"\n      headless: true\n      slowMo: 1000\n      project: "project name"\n      grep: "should include"\n      grepInvert: "should exclude"\n'})}),"\n",(0,r.jsx)(n.h4,{id:"browsername",children:(0,r.jsx)(n.code,{children:"browserName"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsxs)(n.p,{children:["The name of the browser in which to run this test suite.\nAvailable browser names: ",(0,r.jsx)(n.code,{children:"chromium"}),", ",(0,r.jsx)(n.code,{children:"firefox"}),", ",(0,r.jsx)(n.code,{children:"webkit"}),", and ",(0,r.jsx)(n.code,{children:"chrome"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'suites:\n  - name: "saucy test"\n    browserName: "firefox"\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"chromium"}),", ",(0,r.jsx)(n.code,{children:"firefox"}),", and ",(0,r.jsx)(n.code,{children:"webkit"})," are bundled with Playwright. ",(0,r.jsx)(n.code,{children:"chrome"})," is provided by the sauce VM. For more information, see ",(0,r.jsx)(n.a,{href:"https://playwright.dev/docs/browsers",children:"Playwright Browsers"}),"."]})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"headless",children:(0,r.jsx)(n.code,{children:"headless"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | BOOLEAN |"})}),"\n",(0,r.jsx)(n.p,{children:"Determines whether to run the test suite in headless mode."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'suites:\n  - name: "saucy test"\n    headless: true\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"slomo",children:(0,r.jsx)(n.code,{children:"sloMo"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | INTEGER |"})}),"\n",(0,r.jsx)(n.p,{children:"Allows you to alter the test execution speed for the test suite in milliseconds, to simulate different network connectivity or other conditions that may impact load times."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'suites:\n  - name: "saucy test"\n    sloMo: 1000\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"project",children:(0,r.jsx)(n.code,{children:"project"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsxs)(n.p,{children:["Allows you to apply the configurations from your ",(0,r.jsx)(n.a,{href:"https://playwright.dev/docs/test-advanced/#projects",children:"Playwright project"})," to the suite."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"saucectl"})," browserName overrides the Playwright project browserName in the event of a conflict."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'suites:\n  - name: "saucy test"\n    project: "project name"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"grep",children:(0,r.jsx)(n.code,{children:"grep"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsx)(n.p,{children:"Patterns to run tests based on their title."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'suites:\n  - name: "saucy test"\n    grep: "should include"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"grepinvert",children:(0,r.jsx)(n.code,{children:"grepInvert"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsx)(n.p,{children:"Patterns to skip tests based on their title."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'suites:\n  - name: "saucy test"\n    grepInvert: "should exclude"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"updatesnapshots",children:(0,r.jsx)(n.code,{children:"updateSnapshots"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | BOOLEAN |"})}),"\n",(0,r.jsxs)(n.p,{children:["Determines whether to update snapshots with the actual results produced by the test run. Playwright tests support ",(0,r.jsx)(n.a,{href:"https://playwright.dev/docs/test-snapshots",children:"visual comparisons"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'suites:\n  - name: "saucy test"\n    updateSnapshots: true\n'})}),"\n",(0,r.jsxs)(n.p,{children:["To run a test with ",(0,r.jsx)(n.code,{children:"saucectl"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Use the following config to download the baseline screenshots generated in the first run. The baseline screenshots can be found in the ",(0,r.jsx)(n.strong,{children:"artifacts"})," folder and are named ",(0,r.jsx)(n.code,{children:"example-test-1-actual.png"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'artifacts:\n  download:\n    when: always\n    match:\n      - console.log\n      - "*.png" // this will download the new baseline screenshots\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["Create a snapshot folder for the test file (e.g., ",(0,r.jsx)(n.code,{children:"tests/example.test.js"}),")."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ mkdir tests/example.test.js-snapshots\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"Move the downloaded baseline screenshots to the snapshots folder. These screenshots will be accessible to Playwright in the next test run."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ mv artifacts/{your-suite-name}/example-test-1-actual.png tests/example.test.js-snapshots/\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsxs)(n.li,{children:["Set ",(0,r.jsx)(n.code,{children:"updateSnapshots"})," to ",(0,r.jsx)(n.code,{children:"true"}),". Playwright will continue to update the baseline screenshots."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'suites:\n  - name: "saucy test"\n    updateSnapshots: true\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"timeout-2",children:(0,r.jsx)(n.code,{children:"timeout"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | DURATION |"})}),"\n",(0,r.jsxs)(n.p,{children:["Instructs how long ",(0,r.jsx)(n.code,{children:"saucectl"})," should wait for the suite to complete, overriding the default project timeout setting of 30 minutes."]}),"\n",(0,r.jsx)(n.p,{children:"When the suite reaches the timeout limit, its status is set to '?' in the CLI. This does not reflect the actual status of the job in the Sauce Labs web UI or API."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Setting ",(0,r.jsx)(n.code,{children:"0"})," reverts to the value set in ",(0,r.jsx)(n.code,{children:"defaults"}),"."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'suites:\n  - name: "saucy test"\n    timeout: 15m\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"preexec",children:(0,r.jsx)(n.code,{children:"preExec"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING/ARRAY |"})}),"\n",(0,r.jsx)(n.p,{children:"Specifies which commands needs to be executed before the tests are actually started. The commands are executed from the root directory of your project."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["There is a 300-second limit for all ",(0,r.jsx)(n.code,{children:"preExec"})," commands to complete."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'suites:\n  - name: "saucy test"\n    preExec:\n      - node ./scripts/pre-execution-script.js\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"timezone",children:(0,r.jsx)(n.code,{children:"timeZone"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | STRING |"})}),"\n",(0,r.jsx)(n.p,{children:"Allows you to set a custom time zone for your test based on a city name. Most major cities are supported."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'suites:\n  - name: "saucy test"\n    timeZone: New_York\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"passthreshold",children:(0,r.jsx)(n.code,{children:"passThreshold"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | INTEGER |"})}),"\n",(0,r.jsxs)(n.p,{children:["Specifies the minimum number of successful attempts for a suite to be considered as ",(0,r.jsx)(n.code,{children:"passed"}),". It should be used along with ",(0,r.jsx)(n.a,{href:"#retries",children:"retries"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["For example, setting ",(0,r.jsx)(n.code,{children:"retries"})," to 3 and ",(0,r.jsx)(n.code,{children:"passThreshold"})," to 2.\nThe max attempt would be 4 times. If the test passed twice, it'd stop and be marked as ",(0,r.jsx)(n.code,{children:"passed"}),". Otherwise, it'd be marked as ",(0,r.jsx)(n.code,{children:"failed"}),"."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"sauce:\n  retries: 3\nsuite:\n  - name: My Saucy Test\n    passThreshold: 2\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"smartretry",children:(0,r.jsx)(n.code,{children:"smartRetry"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | OBJECT |"})}),"\n",(0,r.jsxs)(n.p,{children:["Specifies the retry strategy to apply for that suite. Requires ",(0,r.jsx)(n.a,{href:"#retries",children:"retries"})," to be >= 1."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"sauce:\n  retries: 3\nsuite:\n  - name: My Saucy Test\n    smartRetry:\n      failedOnly: true\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"failedonly",children:(0,r.jsx)(n.code,{children:"failedOnly"})}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("small",{children:"| OPTIONAL | BOOLEAN |"})}),"\n",(0,r.jsxs)(n.p,{children:["When set to ",(0,r.jsx)(n.code,{children:"true"}),", only the tests that failed during the previous attempt are retried."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"suite:\n  - name: My Saucy Test\n    smartRetry:\n      failedOnly: true\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},19365:(e,n,s)=>{s.d(n,{A:()=>t});s(96540);var r=s(18215);const i={tabItem:"tabItem_Ymn6"};var l=s(74848);function t(e){let{children:n,hidden:s,className:t}=e;return(0,l.jsx)("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,t),hidden:s,children:n})}},11470:(e,n,s)=>{s.d(n,{A:()=>b});var r=s(96540),i=s(18215),l=s(23104),t=s(56347),a=s(205),c=s(57485),d=s(31682),o=s(89466);function h(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:s}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:s,attributes:r,default:i}}=e;return{value:n,label:s,attributes:r,default:i}}))}(s);return function(e){const n=(0,d.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,s])}function p(e){let{value:n,tabValues:s}=e;return s.some((e=>e.value===n))}function x(e){let{queryString:n=!1,groupId:s}=e;const i=(0,t.W6)(),l=function(e){let{queryString:n=!1,groupId:s}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:n,groupId:s});return[(0,c.aZ)(l),(0,r.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(i.location.search);n.set(l,e),i.replace({...i.location,search:n.toString()})}),[l,i])]}function j(e){const{defaultValue:n,queryString:s=!1,groupId:i}=e,l=u(e),[t,c]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${s.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=s.find((e=>e.default))??s[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:l}))),[d,h]=x({queryString:s,groupId:i}),[j,m]=function(e){let{groupId:n}=e;const s=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,l]=(0,o.Dv)(s);return[i,(0,r.useCallback)((e=>{s&&l.set(e)}),[s,l])]}({groupId:i}),g=(()=>{const e=d??j;return p({value:e,tabValues:l})?e:null})();(0,a.A)((()=>{g&&c(g)}),[g]);return{selectedValue:t,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);c(e),h(e),m(e)}),[h,m,l]),tabValues:l}}var m=s(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=s(74848);function y(e){let{className:n,block:s,selectedValue:r,selectValue:t,tabValues:a}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.a_)(),o=e=>{const n=e.currentTarget,s=c.indexOf(n),i=a[s].value;i!==r&&(d(n),t(i))},h=e=>{let n=null;switch(e.key){case"Enter":o(e);break;case"ArrowRight":{const s=c.indexOf(e.currentTarget)+1;n=c[s]??c[0];break}case"ArrowLeft":{const s=c.indexOf(e.currentTarget)-1;n=c[s]??c[c.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":s},n),children:a.map((e=>{let{value:n,label:s,attributes:l}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>c.push(e),onKeyDown:h,onClick:o,...l,className:(0,i.A)("tabs__item",g.tabItem,l?.className,{"tabs__item--active":r===n}),children:s??n},n)}))})}function v(e){let{lazy:n,children:s,selectedValue:i}=e;const l=(Array.isArray(s)?s:[s]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===i));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function w(e){const n=j(e);return(0,f.jsxs)("div",{className:(0,i.A)("tabs-container",g.tabList),children:[(0,f.jsx)(y,{...e,...n}),(0,f.jsx)(v,{...e,...n})]})}function b(e){const n=(0,m.A)();return(0,f.jsx)(w,{...e,children:h(e.children)},String(n))}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var r=s(96540);const i={},l=r.createContext(i);function t(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);