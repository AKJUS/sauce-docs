"use strict";(self.webpackChunksauce_docs=self.webpackChunksauce_docs||[]).push([[22708],{640:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=t(74848),s=t(28453),i=t(86025);const r={id:"auth-token",title:"Exchanging Token between API calls",sidebar_label:"Exchanging Token",description:"How to exchange authentication tokens between API calls"},o=void 0,l={id:"api-testing/use-cases/auth-token",title:"Exchanging Token between API calls",description:"How to exchange authentication tokens between API calls",source:"@site/docs/api-testing/use-cases/auth-token.md",sourceDirName:"api-testing/use-cases",slug:"/api-testing/use-cases/auth-token",permalink:"/sauce-docs/pr-preview/pr-2907/api-testing/use-cases/auth-token",draft:!1,unlisted:!1,editUrl:"https://github.com/saucelabs/sauce-docs/edit/main/docs/api-testing/use-cases/auth-token.md",tags:[],version:"current",lastUpdatedBy:"Alex Plischke",lastUpdatedAt:172477197e4,frontMatter:{id:"auth-token",title:"Exchanging Token between API calls",sidebar_label:"Exchanging Token",description:"How to exchange authentication tokens between API calls"},sidebar:"docs",previous:{title:"Creating Dynamic Headers",permalink:"/sauce-docs/pr-preview/pr-2907/api-testing/use-cases/dynamic-header"},next:{title:"Generating Dynamic Dates",permalink:"/sauce-docs/pr-preview/pr-2907/api-testing/use-cases/dynamic-dates"}},c={},d=[{value:"What You&#39;ll Need",id:"what-youll-need",level:2},{value:"Step 1: Make the Authorization Call",id:"step-1-make-the-authorization-call",level:3},{value:"Step 2: Save the Token for Further Calls",id:"step-2-save-the-token-for-further-calls",level:3},{value:"Step 3: Make a Follow-up Call",id:"step-3-make-a-follow-up-call",level:3},{value:"Step 4: Reuse the Token in a Final Call",id:"step-4-reuse-the-token-in-a-final-call",level:3},{value:"Conclusions",id:"conclusions",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"A part of a good testing strategy is to create end-to-end tests that resemble common user flows. Consider a scenario where a company has an authentication server. This server, when given the proper user credentials, returns an authentication token. This token is required for all other calls throughout the company's API environment. Without this first API call, none of the other API calls can work."}),"\n",(0,a.jsx)(n.h2,{id:"what-youll-need",children:"What You'll Need"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["A Sauce Labs account (",(0,a.jsx)(n.a,{href:"https://accounts.saucelabs.com/am/XUI/#login/",children:"Log in"})," or sign up for a ",(0,a.jsx)(n.a,{href:"https://saucelabs.com/sign-up",children:"free trial license"}),")."]}),"\n",(0,a.jsxs)(n.li,{children:["An existing API Testing Project. For details on how to create one, see ",(0,a.jsx)(n.a,{href:"/api-testing/quickstart/",children:"API Testing Quickstart"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"step-1-make-the-authorization-call",children:"Step 1: Make the Authorization Call"}),"\n",(0,a.jsx)(n.p,{children:"First, make the call to retrieve the token."}),"\n",(0,a.jsxs)(n.p,{children:["To get the token, make a ",(0,a.jsx)(n.code,{children:"POST"})," call to the authorization server."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Url (the endpoint you are calling) - for example ",(0,a.jsx)(n.code,{children:"https://m2-authentication.load2.apifortress.com/request/token"})]}),"\n",(0,a.jsxs)(n.li,{children:["Variable (the variable name) - for example ",(0,a.jsx)(n.code,{children:"authPayload"})]}),"\n",(0,a.jsxs)(n.li,{children:["Mode (the variable type) - for example ",(0,a.jsx)(n.code,{children:"json"})]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["The POST requires as Body the ",(0,a.jsx)(n.code,{children:"user_id"})," and the ",(0,a.jsx)(n.code,{children:"password"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Content-Type - for example ",(0,a.jsx)(n.code,{children:"application/json"})]}),"\n",(0,a.jsx)(n.li,{children:"Body - for example"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n\t"user_id": 4628362,\n\t"password": "abc123"\n}\n'})}),"\n",(0,a.jsx)("img",{src:(0,i.A)("/img/api-testing/post-getting-token.png"),alt:"POST request to authentication server",width:"600"}),"\n",(0,a.jsxs)(n.p,{children:["Given proper credentials, the authentication server will return a payload response with ",(0,a.jsx)(n.code,{children:"user_id"})," and ",(0,a.jsx)(n.code,{children:"access_token"})]}),"\n",(0,a.jsx)("img",{src:(0,i.A)("/img/api-testing/int-token.png"),alt:"The user token",width:"400"}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["You can double-check that the response contains the correct data by adding an assertion verifying that the ",(0,a.jsx)(n.code,{children:"user_id"})," provided in the Request Body is the same as in the Response Payload."]})}),"\n",(0,a.jsx)(n.h3,{id:"step-2-save-the-token-for-further-calls",children:"Step 2: Save the Token for Further Calls"}),"\n",(0,a.jsxs)(n.p,{children:["Next, assign the token to a variable. Variables are used to store data temporarily for a test, but you can use the Sauce Labs API Testing Vault for permanent variables. For more information, see ",(0,a.jsx)(n.a,{href:"/api-testing/vault",children:"Creating Reusable Variables and Snippets with the Vault"}),")."]}),"\n",(0,a.jsxs)(n.p,{children:["Add a ",(0,a.jsx)(n.code,{children:"Set (variable)"})," component."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Variable (the variable name) - ",(0,a.jsx)(n.code,{children:"access_token"})]}),"\n",(0,a.jsxs)(n.li,{children:["Mode (the variable type) - ",(0,a.jsx)(n.code,{children:"String"})]}),"\n",(0,a.jsxs)(n.li,{children:["Value (the value of the variable) - ",(0,a.jsx)(n.code,{children:"${authPayload.access_token}"})]}),"\n"]}),"\n",(0,a.jsx)("img",{src:(0,i.A)("/img/api-testing/int-assign-token.png"),alt:"Setting the variable"}),"\n",(0,a.jsxs)(n.p,{children:["This step takes the ",(0,a.jsx)(n.code,{children:"access_token"})," value in the ",(0,a.jsx)(n.code,{children:"authPayload"})," response, and sets it as ",(0,a.jsx)(n.code,{children:"access_token"}),". The response body from the orginal POST call was saved to a variable called ",(0,a.jsx)(n.code,{children:"authPayload"})," and the key for the token is ",(0,a.jsx)(n.code,{children:"access_token"}),", which can be found by calling ",(0,a.jsx)(n.code,{children:"authPayload.access_token"}),". We do this so we don't have to manually invoke a variable every time it is needed."]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"The dollar sign and brackets are necessary when referencing variables so that Sauce Labs API Testing knows to interpret what\u2019s between the brackets instead of using it literally."})}),"\n",(0,a.jsx)(n.h3,{id:"step-3-make-a-follow-up-call",children:"Step 3: Make a Follow-up Call"}),"\n",(0,a.jsx)(n.p,{children:"Now you can call the cart function that requires the token granted by the authentication server to add items to a cart."}),"\n",(0,a.jsxs)(n.p,{children:["Add a ",(0,a.jsx)(n.code,{children:"PUT"})," request to the cart endpoint to update the cart."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Url (the endpoint you are calling) - for example ",(0,a.jsx)(n.code,{children:"https://m2-authentication.load2.apifortress.com/retail/cart"})]}),"\n",(0,a.jsxs)(n.li,{children:["Variable (the variable name) - for example ",(0,a.jsx)(n.code,{children:"updateCart"})]}),"\n",(0,a.jsxs)(n.li,{children:["Mode (the variable type) - for example ",(0,a.jsx)(n.code,{children:"json"})]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The PUT requires to pass the token granted by the authentication server as Header (we saved as a Variable):"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Name (the variable name) - for example ",(0,a.jsx)(n.code,{children:"user_token"})]}),"\n",(0,a.jsxs)(n.li,{children:["Value (the value of the variable) - for example ",(0,a.jsx)(n.code,{children:"${access_token}"})]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"It also requires a JSON object as a Body that the server will recognize as item id and quantities."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Content-Type - for example ",(0,a.jsx)(n.code,{children:"application/json"})]}),"\n",(0,a.jsx)(n.li,{children:"Body - for example"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "1": 1,\n    "2": 2,\n    "3": 3,\n    "8": 1,\n    "9": 3\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Now, you can add assertions to verify the payload response returned by the call."}),"\n",(0,a.jsx)(n.h3,{id:"step-4-reuse-the-token-in-a-final-call",children:"Step 4: Reuse the Token in a Final Call"}),"\n",(0,a.jsxs)(n.p,{children:["You can reuse the token as many times as you want inside the same test.\nNow that you have updated the cart, you can add a ",(0,a.jsx)(n.code,{children:"GET"})," request to return the items that are currently in it."]}),"\n",(0,a.jsxs)(n.p,{children:["Add a ",(0,a.jsx)(n.code,{children:"GET"})," request to the cart endpoint to view the items."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Url (the endpoint you are calling) - for example ",(0,a.jsx)(n.code,{children:"https://m2-authentication.load2.apifortress.com/retail/cart"})]}),"\n",(0,a.jsxs)(n.li,{children:["Variable (the variable name) - for example ",(0,a.jsx)(n.code,{children:"getCart"})]}),"\n",(0,a.jsxs)(n.li,{children:["Mode (the variable type) - for example ",(0,a.jsx)(n.code,{children:"json"})]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The GET requires to pass the token granted by the authentication server as Header (we saved as a Variable):"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Name (the variable name) - for example ",(0,a.jsx)(n.code,{children:"user_token"})]}),"\n",(0,a.jsxs)(n.li,{children:["Value (the value of the variable) - for example ",(0,a.jsx)(n.code,{children:"${access_token}"})]}),"\n"]}),"\n",(0,a.jsx)("img",{src:(0,i.A)("/img/api-testing/reuse-token-final.webp"),alt:"Reusing tokens",width:"600"}),"\n",(0,a.jsx)(n.p,{children:"Now, you can add assertions to verify the payload response returned by the call."}),"\n",(0,a.jsx)(n.p,{children:"In Code view the test could look like:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'- id: post\n  children:\n    - id: body\n      contentType: application/json\n      content: |-\n        {\n        \t"user_id": 4628362,\n        \t"password": "abc123"\n        }\n  url: https://m2-authentication.load2.apifortress.com/request/token\n  var: authPayload\n  mode: json\n- id: assert-equals\n  expression: authPayload.user_id\n  comment: The user id returned in the payload response is the same it was passed\n    in the request body\n  value: 4628362\n- id: set\n  var: access_token\n  mode: string\n  value: ${authPayload.access_token}\n- id: put\n  children:\n    - id: body\n      contentType: application/json\n      content: |\n        {\n            "1": 1,\n            "2": 2,\n            "3": 3,\n        \t"8": 1,\n            "9": 3\n        }\n    - id: header\n      name: user_token\n      value: ${access_token}\n  url: https://m2-authentication.load2.apifortress.com/retail/cart\n  var: updateCart\n  mode: json\n- id: assert-equals\n  expression: updateCart.message\n  value: Items successfully added\n- id: assert-is\n  expression: updateCart.status\n  type: integer\n- id: assert-equals\n  expression: updateCart.status\n  value: 201\n- id: get\n  children:\n    - id: header\n      name: user_token\n      value: ${access_token}\n  url: https://m2-authentication.load2.apifortress.com/retail/cart\n  var: getCart\n  mode: json\n- id: each\n  children:\n    - id: comment\n      text: current id is ${_1.id}\n    - id: if\n      children:\n        - id: assert-equals\n          expression: _1.quantity\n          value: 1\n      expression: _1.id == 1\n    - id: if\n      children:\n        - id: assert-equals\n          expression: _1.quantity\n          value: 2\n      expression: _1.id == 2\n    - id: if\n      children:\n        - id: assert-equals\n          expression: _1.quantity\n          value: 3\n      expression: _1.id == 3\n    - id: if\n      children:\n        - id: assert-equals\n          expression: _1.quantity\n          value: 1\n      expression: _1.id == 8\n    - id: if\n      children:\n        - id: assert-equals\n          expression: _1.quantity\n          value: 3\n      expression: _1.id == 9\n  expression: getCart\n'})}),"\n",(0,a.jsx)(n.h2,{id:"conclusions",children:"Conclusions"}),"\n",(0,a.jsx)(n.p,{children:"It is important to not just exercise endpoints, but validate that an entire series of micorservices are working. It's best to do that by writing test that emulate common and uncommon user flows. A critical part of that work involves creating reusable variables to allow the test to work at any time, with any data. By making a request for a fresh token at the beginning of the sequence, and then assigning it to a variable, you will know that any time you run this test, you are doing so with a valid access token, which is automatically being passed to all follow-up calls."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var a=t(96540);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);